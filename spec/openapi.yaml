openapi: 3.1.0
info:
  title: Cloud Foundry V3 API
  description: |-
    # Welcome to the Cloud Foundry V3 API docs! Version 3 adds support for several key features:

    - Running one-off tasks on Cloud Foundry
    - Applications consisting of several processes via a Procfile
    - Direct access to application packages and droplets
    - Changing application source code without stopping the app via deployments

    # Getting help
    The CAPI team can most easily be reached on our Slack channel for questions and issues regarding the API. To report an issue with the docs or API, please feel free to file a GitHub issue on our API repo, cloud_controller_ng.
    We recommend reaching out to Slack first as we will be most responsive there.
        
    # More resources
    - The Cloud Foundry V2 API is still depricated but still available for interacting with Cloud Foundry.
    - Running Tasks
    - V3 API Documentation OpenAPI Spec Source Code.
  version: 3.x.0
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  contact:
    email: cf-dev@lists.cloudfoundry.org
    name: Cloud Foundry CAPI Team
    url: https://cloudfoundry.slack.com/archives/C07C04W4Q
servers:
  - url: http://127.0.0.1:4010
    description: Prism mock server
tags:
  - name: Apps
    description: |
      Apps represent the core entities in the Cloud Foundry environment. They are the deployable units that run your code. Each app can have multiple processes, routes, and services associated with it. Apps can be scaled horizontally by increasing the number of instances. They can also be updated and restarted as needed. The lifecycle of an app includes stages such as staging, starting, running, and stopping. Apps can be managed through various endpoints that allow for creation, updating, deletion, and retrieval of app details.
  - name: AppFeatures
    description: |
      AppFeatures provide additional capabilities and configurations for apps. These features can include things like auto-scaling, health checks, and custom domains. AppFeatures enhance the functionality of apps by allowing developers to enable or disable specific features based on their requirements. They can be managed through endpoints that allow for enabling, disabling, and retrieving the status of app features.
  - name: AppUsageEvents
    description: |
      AppUsageEvents track the usage and activity of apps within the Cloud Foundry environment. These events provide insights into app lifecycle changes, such as creation, deletion, scaling, and crashes. AppUsageEvents are useful for monitoring and auditing purposes, helping administrators understand how apps are being used and identify any issues. They can be retrieved through endpoints that provide detailed information about each event.
  - name: AuditEvents
    description: |
      AuditEvents capture significant actions and changes within the Cloud Foundry environment. These events include actions performed by users, such as creating, updating, or deleting resources. AuditEvents provide a comprehensive audit trail that helps administrators track changes and ensure compliance with organizational policies. They can be retrieved through endpoints that provide detailed information about each event, including the user who performed the action and the affected resources.
  - name: Builds
    description: |
      Builds represent the process of transforming source code into a runnable artifact. In Cloud Foundry, builds are created using buildpacks, which provide the necessary dependencies and configurations for the app. Builds can be triggered manually or automatically as part of the app deployment process. They can be managed through endpoints that allow for creation, updating, deletion, and retrieval of build details.
  - name: Buildpacks
    description: |
      Buildpacks are responsible for detecting, compiling, and packaging apps in the Cloud Foundry environment. They provide the necessary runtime and dependencies for the app to run. Buildpacks can be customized and extended to support different languages and frameworks. They can be managed through endpoints that allow for creation, updating, deletion, and retrieval of buildpack details.
  - name: Deployments
    description: |
      Deployments represent the process of deploying apps to the Cloud Foundry environment. They include stages such as staging, starting, and running the app. Deployments can be triggered manually or automatically as part of the app lifecycle. They can be managed through endpoints that allow for creation, updating, deletion, and retrieval of deployment details.
  - name: Domains
    description: |
      Domains represent the DNS domains used to route traffic to apps in the Cloud Foundry environment. They can be shared or private, and can be associated with specific organizations or spaces. Domains can be managed through endpoints that allow for creation, updating, deletion, and retrieval of domain details.
  - name: Droplets
    description: |
      Droplets are the runnable artifacts created from builds in the Cloud Foundry environment. They contain the compiled code and dependencies needed to run the app. Droplets can be managed through endpoints that allow for creation, updating, deletion, and retrieval of droplet details.
  - name: EnvironmentVariableGroups
    description: |
      EnvironmentVariableGroups represent collections of environment variables that can be applied to apps in the Cloud Foundry environment. They provide a way to manage and share common configurations across multiple apps. EnvironmentVariableGroups can be managed through endpoints that allow for creation, updating, deletion, and retrieval of environment variable group details.
  - name: FeatureFlags
    description: |
      FeatureFlags provide a way to enable or disable specific features in the Cloud Foundry environment. They allow administrators to control the availability of features based on organizational requirements. FeatureFlags can be managed through endpoints that allow for enabling, disabling, and retrieving the status of feature flags.
  - name: Info
    description: |
      The Info endpoint provides information about the Cloud Foundry environment, including version details, API endpoints, and other metadata. It is useful for understanding the capabilities and configuration of the environment. The Info endpoint can be accessed to retrieve detailed information about the Cloud Foundry deployment.
  - name: IsolationSegments
    description: |
      IsolationSegments provide a way to isolate apps and resources within the Cloud Foundry environment. They allow for the creation of isolated environments with dedicated resources, such as compute, storage, and networking. IsolationSegments can be managed through endpoints that allow for creation, updating, deletion, and retrieval of isolation segment details.
  - name: Jobs
    description: |
      Jobs represent asynchronous operations in the Cloud Foundry environment. They are used for tasks that may take a long time to complete, such as app deployments, service provisioning, and data migrations. Jobs can be managed through endpoints that allow for creation, updating, deletion, and retrieval of job details.
  - name: Manifests
    description: |
      Manifests provide a way to define the configuration and deployment details of apps in the Cloud Foundry environment. They include information such as app name, buildpack, environment variables, and services. Manifests can be used to automate the deployment and management of apps. They can be managed through endpoints that allow for creation, updating, deletion, and retrieval of manifest details.
  - name: Organizations
    description: |
      Organizations represent the top-level entities in the Cloud Foundry environment. They provide a way to group and manage resources, such as apps, spaces, and users. Organizations can be managed through endpoints that allow for creation, updating, deletion, and retrieval of organization details.
  - name: OrganizationQuotas
    description: |
      OrganizationQuotas define the resource limits and constraints for organizations in the Cloud Foundry environment. They include limits on memory, instances, routes, and services. OrganizationQuotas can be managed through endpoints that allow for creation, updating, deletion, and retrieval of organization quota details.
  - name: Packages
    description: |
      Packages represent the source code and dependencies of apps in the Cloud Foundry environment. They are used to create builds and droplets. Packages can be managed through endpoints that allow for creation, updating, deletion, and retrieval of package details.
  - name: Processes
    description: |
      Processes represent the runnable units of apps in the Cloud Foundry environment. They include information such as command, instances, memory, and disk. Processes can be managed through endpoints that allow for creation, updating, deletion, and retrieval of process details.
  - name: ResourceMatches
    description: |
      ResourceMatches provide a way to identify and reuse existing resources in the Cloud Foundry environment. They help optimize resource usage by matching new resources with existing ones. ResourceMatches can be managed through endpoints that allow for creation, updating, deletion, and retrieval of resource match details.
  - name: Revisions
    description: |
      Revisions represent the versions of apps in the Cloud Foundry environment. They provide a way to track and manage changes to apps over time. Revisions can be managed through endpoints that allow for creation, updating, deletion, and retrieval of revision details.
  - name: Roles
    description: |
      Roles define the permissions and access levels for users in the Cloud Foundry environment. They include roles such as admin, developer, and auditor. Roles can be managed through endpoints that allow for creation, updating, deletion, and retrieval of role details.
  - name: Root
    description: |
      The Root endpoint provides the entry point for the Cloud Foundry API. It includes links to all the available resources and endpoints. The Root endpoint can be accessed to retrieve detailed information about the Cloud Foundry API and its capabilities.
  - name: SecurityGroups
    description: |
      SecurityGroups define the network access rules for apps in the Cloud Foundry environment. They include rules for inbound and outbound traffic. SecurityGroups can be managed through endpoints that allow for creation, updating, deletion, and retrieval of security group details.
  - name: ServiceBrokers
    description: |
      ServiceBrokers provide a way to manage and provision services in the Cloud Foundry environment. They include information such as service plans, instances, and bindings. ServiceBrokers can be managed through endpoints that allow for creation, updating, deletion, and retrieval of service broker details.
  - name: ServiceOfferings
    description: |
      ServiceOfferings represent the available services in the Cloud Foundry environment. They include information such as service plans, instances, and bindings. ServiceOfferings can be managed through endpoints that allow for creation, updating, deletion, and retrieval of service offering details.
  - name: ServicePlans
    description: |
      ServicePlans define the configurations and pricing for services in the Cloud Foundry environment. They include information such as memory, instances, and routes. ServicePlans can be managed through endpoints that allow for creation, updating, deletion, and retrieval of service plan details.
  - name: ServicePlanVisibility
    description: |
      ServicePlanVisibility defines the visibility and access rules for service plans in the Cloud Foundry environment. They include information such as organization and space access. ServicePlanVisibility can be managed through endpoints that allow for creation, updating, deletion, and retrieval of service plan visibility details.
  - name: ServiceInstances
    description: |
      ServiceInstances represent the instances of services in the Cloud Foundry environment. They include information such as service plans, bindings, and credentials. ServiceInstances can be managed through endpoints that allow for creation, updating, deletion, and retrieval of service instance details.
  - name: ServiceCredentialBinding
    description: |
      ServiceCredentialBinding provides a way to bind service instances to apps in the Cloud Foundry environment. They include information such as credentials and bindings. ServiceCredentialBinding can be managed through endpoints that allow for creation, updating, deletion, and retrieval of service credential binding details.
  - name: ServiceRouteBinding
    description: |
      ServiceRouteBinding provides a way to bind service instances to routes in the Cloud Foundry environment. They include information such as credentials and bindings. ServiceRouteBinding can be managed through endpoints that allow for creation, updating, deletion, and retrieval of service route binding details.
  - name: ServiceUsageEvents
    description: |
      ServiceUsageEvents track the usage and activity of services in the Cloud Foundry environment. They provide insights into service lifecycle changes, such as creation, deletion, and updates. ServiceUsageEvents are useful for monitoring and auditing purposes, helping administrators understand how services are being used and identify any issues. They can be retrieved through endpoints that provide detailed information about each event.
  - name: Sidecars
    description: |
      Sidecars represent additional processes that run alongside the main app processes in the Cloud Foundry environment. They provide additional functionality, such as logging, monitoring, and security. Sidecars can be managed through endpoints that allow for creation, updating, deletion, and retrieval of sidecar details.
  - name: Spaces
    description: |
      Spaces represent the logical grouping of resources within an organization in the Cloud Foundry environment. They provide a way to manage apps, services, and users within a specific context. Spaces can be managed through endpoints that allow for creation, updating, deletion, and retrieval of space details.
  - name: SpaceFeatures
    description: |
      SpaceFeatures provide additional capabilities and configurations for spaces in the Cloud Foundry environment. These features can include things like auto-scaling, health checks, and custom domains. SpaceFeatures enhance the functionality of spaces by allowing administrators to enable or disable specific features based on their requirements. They can be managed through endpoints that allow for enabling, disabling, and retrieving the status of space features.
  - name: SpaceQuotas
    description: |
      SpaceQuotas define the resource limits and constraints for spaces in the Cloud Foundry environment. They include limits on memory, instances, routes, and services. SpaceQuotas can be managed through endpoints that allow for creation, updating, deletion, and retrieval of space quota details.
  - name: Stacks
    description: |
      Stacks are the base operating system and file system that your application will execute in. A stack is how you configure applications to run against different operating systems (like Windows or Linux) and different versions of those operating systems (like Windows 2012 or Windows 2016).

      An application’s lifecycle will specify which stack to execute the application in. Buildpacks can also be associated with a particular stack if they contain stack-specific logic. An application will automatically use buildpacks associated with the application’s configured stack.

      Stacks are not used for apps with a Docker lifecycle.
  - name: Tasks
    description: |
      Tasks represent one-off processes that can be run in the Cloud Foundry environment. They provide a way to execute background jobs, data migrations, and other tasks that are not part of the main app processes. Tasks can be managed through endpoints that allow for creation, updating, deletion, and retrieval of task details.
  - name: Users
    description: Users represent the individuals who have access to the Cloud Foundry environment. They include information such as roles, permissions, and credentials. Users can be managed through endpoints that allow for creation, updating, deletion, and retrieval of user details.
  - name: Routes
    description: |
      Routes represent the network endpoints used to access apps in the Cloud Foundry environment. They include information such as domain, path, and port. Routes can be managed through endpoints that allow for creation, updating, deletion, and retrieval of route details. By specifying routes, applications can define how they are accessed by end-users, ensuring traffic is directed to the appropriate application instances.
paths:
  /v3/buildpacks:
    post:
      tags:
        - Buildpacks
      summary: Create a buildpack
      description: Create a new buildpack
      operationId: createBuildpack
      requestBody:
        $ref: '#/components/requestBodies/buildpackCreateRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/buildpackCreateResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 20001
                    title: CF-UserInvalid
                    detail: 'The user info is invalid: %s'
      security:
        - oauth:
            - cloud_controller.write
    get:
      security:
        - oauth:
            - cloud_controller.read
      tags:
        - Buildpacks
      summary: List buildpacks
      description: Retrieve a list of buildpacks available in the system.
      operationId: listBuildpacks
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - $ref: '#/components/parameters/labelSelector'
        - name: name
          in: query
          schema:
            type: array
            items:
              type: string
          description: |
            Comma-delimited list of buildpack names to filter by
        - name: stacks
          in: query
          schema:
            type: array
            items:
              type: string
          description: |
            Comma-delimited list of stacks to filter by
      responses:
        '200':
          description: List of buildpacks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/buildpackList'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500Unauthorized'
  /v3/buildpacks/{guid}:
    get:
      tags:
        - Buildpacks
      summary: Retrieve a buildpack
      description: Retrieve details of a specific buildpack by its GUID.
      operationId: getBuildpack
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        '200':
          $ref: '#/components/responses/buildpackGetResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10005
                    title: CF-BadQueryParameter
                    detail: 'The query parameter is invalid: %s'
      security:
        - oauth:
            - cloud_controller.read
    patch:
      tags:
        - Buildpacks
      summary: Update a buildpack
      description: Update attributes of a specific buildpack by its GUID.
      operationId: ppdateBuildpack
      parameters:
        - $ref: '#/components/parameters/guid'
      requestBody:
        description: Buildpack object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the buildpack
                stack:
                  type: string
                  description: The stack the buildpack is compatible with
                position:
                  type: integer
                  description: The position of the buildpack in the order of execution
                enabled:
                  type: boolean
                  description: Whether the buildpack is enabled
                locked:
                  type: boolean
                  description: Whether the buildpack is locked
                filename:
                  type: string
                  description: The filename of the buildpack
              required:
                - name
              description: Request schema for updating a buildpack
            examples:
              buildpack:
                summary: A sample buildpack
                value:
                  name: ruby_buildpack
                  stack: cflinuxfs3
                  position: 1
                  enabled: true
                  locked: false
                  filename: ruby_buildpack-cflinuxfs3-v1.0.0.zip
      responses:
        '200':
          description: Successfully updated buildpack
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/buildpack'
              examples:
                buildpack:
                  summary: A sample buildpack
                  value:
                    guid: d5ccf6b2-3b8e-4b8e-8b8e-8b8e8b8e8b8e
                    created_at: '2023-10-01T12:00:00Z'
                    updated_at: '2023-10-01T12:00:00Z'
                    name: ruby_buildpack
                    stack: cflinuxfs3
                    position: 1
                    enabled: true
                    locked: false
                    filename: ruby_buildpack-cflinuxfs3-v1.0.0.zip
                    links:
                      self:
                        href: http://127.0.0.1:4010/v3/buildpacks/d5ccf6b2-3b8e-4b8e-8b8e-8b8e8b8e8b8e
                      upload:
                        href: http://127.0.0.1:4010/v3/buildpacks/d5ccf6b2-3b8e-4b8e-8b8e-8b8e8b8e8b8e/upload
                        method: POST
                    metadata:
                      labels:
                        some: label
                      annotations:
                        some: annotation
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 20001
                    title: CF-UserInvalid
                    detail: 'The user info is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10010
                    title: CF-ResourceNotFound
                    detail: '%s'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10008
                    title: CF-UnprocessableEntity
                    detail: '%s'
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.write
    delete:
      tags:
        - Buildpacks
      summary: Delete a buildpack
      description: Delete a specific buildpack by its GUID.
      operationId: deleteBuildpack
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        '204':
          description: Successfully deleted buildpack
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10005
                    title: CF-BadQueryParameter
                    detail: 'The query parameter is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10005
                    title: CF-BadQueryParameter
                    detail: 'The query parameter is invalid: %s'
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.write
  /v3/buildpacks/{guid}/upload:
    post:
      tags:
        - Buildpacks
      summary: Upload a buildpack
      description: Upload a buildpack file for a specific buildpack by its GUID.
      operationId: uploadBuildpack
      parameters:
        - $ref: '#/components/parameters/guid'
      requestBody:
        description: The buildpack file to be uploaded
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                bits:
                  type: string
                  format: binary
                  description: The buildpack file to be uploaded
              required:
                - bits
              description: Request schema for uploading a buildpack
      responses:
        '200':
          description: Successfully uploaded buildpack
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/buildpack'
              examples:
                buildpack:
                  summary: A sample buildpack
                  value:
                    guid: d5ccf6b2-3b8e-4b8e-8b8e-8b8e8b8e8b8e
                    created_at: '2023-10-01T12:00:00Z'
                    updated_at: '2023-10-01T12:00:00Z'
                    name: ruby_buildpack
                    stack: cflinuxfs3
                    position: 1
                    enabled: true
                    locked: false
                    filename: ruby_buildpack-cflinuxfs3-v1.0.0.zip
                    links:
                      self:
                        href: http://127.0.0.1:4010/v3/buildpacks/d5ccf6b2-3b8e-4b8e-8b8e-8b8e8b8e8b8e
                      upload:
                        href: http://127.0.0.1:4010/v3/buildpacks/d5ccf6b2-3b8e-4b8e-8b8e-8b8e8b8e8b8e/upload
                        method: POST
                    metadata:
                      labels:
                        some: label
                      annotations:
                        some: annotation
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10005
                    title: CF-BadQueryParameter
                    detail: 'The query parameter is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10010
                    title: CF-ResourceNotFound
                    detail: '%s'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10008
                    title: CF-UnprocessableEntity
                    detail: '%s'
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.write
  /v3/users:
    get:
      security:
        - oauth:
            - cloud_controller.read
      tags:
        - Users
      summary: List users
      description: Retrieve all users the user has access to.
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - name: guids
          in: query
          description: Comma-delimited list of user guids to filter by
          required: false
          schema:
            type: array
            items:
              type: string
        - name: usernames
          in: query
          description: Comma-delimited list of usernames to filter by
          required: false
          schema:
            type: array
            items:
              type: string
        - name: origins
          in: query
          description: Comma-delimited list of user origins to filter by
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paginated_users'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10005
                    title: CF-BadQueryParameter
                    detail: 'The query parameter is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10001
                    title: CF-ServerError
                    detail: Server error
      operationId: listUsers
    post:
      security:
        - oauth:
            - cloud_controller.write
      tags:
        - Users
      summary: Create a user
      description: Create a new user.
      operationId: createUser
      requestBody:
        $ref: '#/components/requestBodies/userCreate'
      responses:
        '201':
          $ref: '#/components/responses/userCreateResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 20001
                    title: CF-UserInvalid
                    detail: 'The user info is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500Unauthorized'
  /v3/users/{guid}:
    get:
      tags:
        - Users
      summary: Get a user
      description: Retrieve a user by its GUID.
      operationId: getUser
      security:
        - oauth:
            - cloud_controller.read
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10005
                    title: CF-BadQueryParameter
                    detail: 'The query parameter is invalid: %s'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10002
                    title: CF-NotAuthenticated
                    detail: Authentication error
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10003
                    title: CF-NotAuthorized
                    detail: You are not authorized to perform the requested action
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10010
                    title: CF-ResourceNotFound
                    detail: '%s'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10001
                    title: CF-ServerError
                    detail: Server error
    patch:
      tags:
        - Users
      summary: Update a user
      description: Update an existing user.
      operationId: updateUser
      security:
        - oauth:
            - cloud_controller.write
      parameters:
        - $ref: '#/components/parameters/guid'
      requestBody:
        $ref: '#/components/requestBodies/userUpdate'
      responses:
        '200':
          $ref: '#/components/responses/userUpdateResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 20001
                    title: CF-UserInvalid
                    detail: 'The user info is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10010
                    title: CF-ResourceNotFound
                    detail: '%s'
        '500':
          $ref: '#/components/responses/500Unauthorized'
    delete:
      tags:
        - Users
      summary: Delete a user
      description: Delete a user by its GUID.
      operationId: deleteUser
      security:
        - oauth:
            - cloud_controller.write
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10005
                    title: CF-BadQueryParameter
                    detail: 'The query parameter is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10010
                    title: CF-ResourceNotFound
                    detail: '%s'
        '500':
          $ref: '#/components/responses/500Unauthorized'
  /v3/droplets:
    post:
      tags:
        - Droplets
      summary: Create a droplet
      description: Create a new droplet
      operationId: createDroplet
      requestBody:
        $ref: '#/components/requestBodies/dropletCreateRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/dropletCreateResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100001
                    title: CF-AppInvalid
                    detail: 'The app is invalid: %s'
      security:
        - oauth:
            - cloud_controller.write
    get:
      security:
        - oauth:
            - cloud_controller.read
      tags:
        - Droplets
      summary: List droplets
      description: Retrieve a list of droplets available in the system.
      operationId: listDroplets
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - $ref: '#/components/parameters/labelSelector'
        - name: guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: |
            Comma-delimited list of droplet GUIDs to filter by
        - name: states
          in: query
          schema:
            type: array
            items:
              type: string
          description: |
            Comma-delimited list of droplet states to filter by
        - name: app_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: |
            Comma-delimited list of app GUIDs to filter by
        - name: space_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: |
            Comma-delimited list of space GUIDs to filter by
        - name: organization_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: |
            Comma-delimited list of organization GUIDs to filter by
      responses:
        '200':
          $ref: '#/components/responses/dropletListResponse'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500Unauthorized'
  /v3/droplets/{droplet_guid}:
    get:
      tags:
        - Droplets
      summary: Retrieve a droplet
      description: Retrieve details of a specific droplet by its GUID.
      operationId: getDroplet
      parameters:
        - $ref: '#/components/parameters/dropletGuid'
      responses:
        '200':
          $ref: '#/components/responses/dropletGetResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100001
                    title: CF-AppInvalid
                    detail: 'The app is invalid: %s'
      security:
        - oauth:
            - cloud_controller.read
    patch:
      tags:
        - Droplets
      summary: Update a droplet
      description: Update attributes of a specific droplet by its GUID.
      operationId: updateDroplet
      parameters:
        - $ref: '#/components/parameters/dropletGuid'
      requestBody:
        description: Droplet object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                metadata:
                  $ref: '#/components/schemas/metadata'
                image:
                  type: string
                  description: Image reference where the built complete image was stored
              required:
                - image
              description: Request schema for updating a droplet
      responses:
        '200':
          $ref: '#/components/responses/dropletGetResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100001
                    title: CF-AppInvalid
                    detail: 'The app is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10010
                    title: CF-ResourceNotFound
                    detail: '%s'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10008
                    title: CF-UnprocessableEntity
                    detail: '%s'
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.write
    delete:
      tags:
        - Droplets
      summary: Delete a droplet
      description: Delete a specific droplet by its GUID.
      operationId: deleteDroplet
      parameters:
        - $ref: '#/components/parameters/dropletGuid'
      responses:
        '204':
          description: Successfully deleted droplet
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100001
                    title: CF-AppInvalid
                    detail: 'The app is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.write
  /v3/droplets/{droplet_guid}/download:
    get:
      tags:
        - Droplets
      summary: Download a droplet
      description: Download a droplet file by its GUID.
      operationId: downloadDroplet
      parameters:
        - $ref: '#/components/parameters/dropletGuid'
      responses:
        '200':
          $ref: '#/components/responses/dropletGetResponse'
        '302':
          description: Redirect to download location
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10010
                    title: CF-ResourceNotFound
                    detail: '%s'
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.read
  /v3/droplets/{droplet_guid}/upload:
    post:
      tags:
        - Droplets
      summary: Upload a droplet
      description: Upload a droplet file for a specific droplet by its GUID.
      operationId: uploadDroplet
      parameters:
        - $ref: '#/components/parameters/dropletGuid'
      requestBody:
        description: The droplet file to be uploaded
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                bits:
                  type: string
                  format: binary
                  description: The droplet file to be uploaded
              required:
                - bits
              description: Request schema for uploading a droplet
      responses:
        '200':
          $ref: '#/components/responses/dropletGetResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100001
                    title: CF-AppInvalid
                    detail: 'The app is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10010
                    title: CF-ResourceNotFound
                    detail: '%s'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10008
                    title: CF-UnprocessableEntity
                    detail: '%s'
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.write
  /v3/domains:
    get:
      security:
        - oauth:
            - cloud_controller.read
      tags:
        - Domains
      summary: List domains
      description: Retrieve a list of all domains the user has access to.
      operationId: listDomains
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - $ref: '#/components/parameters/labelSelector'
        - name: guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of GUIDs to filter by
        - name: names
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of domain names to filter by
        - name: organization_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of owning organization GUIDs to filter by
      responses:
        '200':
          description: List of domains
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domainList'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
    post:
      tags:
        - Domains
      summary: Create a domain
      description: Create a new domain.
      operationId: createDomain
      requestBody:
        description: Domain object that needs to be created
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the domain
                internal:
                  type: boolean
                  description: Whether the domain is used for internal (container-to-container) traffic
                router_group:
                  type: object
                  properties:
                    guid:
                      type: string
                      format: uuid
                      description: The desired router group GUID
                organization:
                  $ref: '#/components/schemas/relationshipToOne'
                shared_organizations:
                  $ref: '#/components/schemas/relationshipToMany'
                metadata:
                  $ref: '#/components/schemas/metadata'
              required:
                - name
                - internal
      responses:
        '201':
          description: Successfully created domain
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domain'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 130001
                    title: CF-DomainInvalid
                    detail: 'The domain is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      security:
        - oauth:
            - cloud_controller.write
  /v3/domains/{guid}:
    get:
      tags:
        - Domains
      summary: Retrieve a domain
      description: Retrieve details of a specific domain by its GUID.
      operationId: getDomain
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        '200':
          description: Successfully retrieved domain
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domain'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 130001
                    title: CF-DomainInvalid
                    detail: 'The domain is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Domain not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 130002
                    title: CF-DomainNotFound
                    detail: 'The domain could not be found: %s'
      security:
        - oauth:
            - cloud_controller.read
    patch:
      tags:
        - Domains
      summary: Update a domain
      description: Update attributes of a specific domain by its GUID.
      operationId: updateDomain
      parameters:
        - $ref: '#/components/parameters/guid'
      requestBody:
        description: Domain object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                metadata:
                  $ref: '#/components/schemas/metadata'
              description: Request schema for updating a domain
      responses:
        '200':
          description: Successfully updated domain
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domain'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 130001
                    title: CF-DomainInvalid
                    detail: 'The domain is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Domain not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 130002
                    title: CF-DomainNotFound
                    detail: 'The domain could not be found: %s'
      security:
        - oauth:
            - cloud_controller.write
    delete:
      tags:
        - Domains
      summary: Delete a domain
      description: Delete a specific domain by its GUID.
      operationId: deleteDomain
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        '204':
          description: Successfully deleted domain
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 130001
                    title: CF-DomainInvalid
                    detail: 'The domain is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Domain not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 130002
                    title: CF-DomainNotFound
                    detail: 'The domain could not be found: %s'
      security:
        - oauth:
            - cloud_controller.write
  /v3/domains/{guid}/relationships/shared_organizations:
    post:
      tags:
        - Domains
      summary: Share a domain
      description: Share an organization-scoped domain to other organizations specified by a list of organization GUIDs.
      operationId: shareDomain
      parameters:
        - $ref: '#/components/parameters/guid'
      requestBody:
        description: List of organizations to share the domain with
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/relationship'
              description: Organization relationships; each organization will be entitled to manage this isolation segment
      responses:
        '200':
          description: Successfully shared domain
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/relationship'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 130001
                    title: CF-DomainInvalid
                    detail: 'The domain is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Domain not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 130002
                    title: CF-DomainNotFound
                    detail: 'The domain could not be found: %s'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10008
                    title: CF-UnprocessableEntity
                    detail: '%s'
      security:
        - oauth:
            - cloud_controller.write
  /v3/domains/{guid}/relationships/shared_organizations/{org_guid}:
    delete:
      tags:
        - Domains
      summary: Unshare a domain
      description: Unshare a domain from a specific organization.
      operationId: unshareDomain
      parameters:
        - $ref: '#/components/parameters/guid'
        - name: org_guid
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The GUID of the organization to unshare the domain from
      responses:
        '204':
          description: Successfully unshared domain
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 130001
                    title: CF-DomainInvalid
                    detail: 'The domain is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Domain or organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 130002
                    title: CF-DomainNotFound
                    detail: 'The domain could not be found: %s'
                  - code: 30003
                    title: CF-OrganizationNotFound
                    detail: 'The organization could not be found: %s'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10008
                    title: CF-UnprocessableEntity
                    detail: '%s'
      security:
        - oauth:
            - cloud_controller.write
  /v3/organizations/{org_guid}/domains:
    get:
      tags:
        - Domains
      summary: List domains for an organization
      description: Retrieve a list of all domains available in an organization for the current user.
      operationId: listDomainsForOrganization
      parameters:
        - name: org_guid
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - name: guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of GUIDs to filter by
        - name: names
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of domain names to filter by
      responses:
        '200':
          description: List of domains
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domainList'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      security:
        - oauth:
            - cloud_controller.read
  /v3/organizations/{org_guid}/domains/default:
    get:
      tags:
        - Domains
      summary: Get the default domain
      description: Retrieve the default domain for a given organization.
      operationId: getDefaultDomain
      parameters:
        - name: org_guid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved default domain
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domain'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Domain not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 130002
                    title: CF-DomainNotFound
                    detail: 'The domain could not be found: %s'
      security:
        - oauth:
            - cloud_controller.read
  /v3/environment_variable_groups/running:
    get:
      tags:
        - EnvironmentVariableGroups
      summary: Get running environment variable group
      description: Retrieve the environment variable group for running applications.
      operationId: getRunningEnvironmentVariableGroup
      responses:
        '200':
          description: Successfully retrieved running environment variable group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environmentVariableGroup'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.read
    patch:
      tags:
        - EnvironmentVariableGroups
      summary: Update running environment variable group
      description: Update the environment variable group for running applications.
      operationId: updateRunningEnvironmentVariableGroup
      requestBody:
        description: The environment variables to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                var:
                  type: object
                  additionalProperties:
                    type: string
                  description: Environment variables to inject; keys and values must be strings
      responses:
        '200':
          description: Successfully updated running environment variable group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environmentVariableGroup'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 380001
                    title: CF-EnvironmentVariableGroupInvalid
                    detail: 'The Environment Variable Group is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.write
  /v3/environment_variable_groups/staging:
    get:
      tags:
        - EnvironmentVariableGroups
      summary: Get staging environment variable group
      description: Retrieve the environment variable group for staging applications.
      operationId: getStagingEnvironmentVariableGroup
      responses:
        '200':
          description: Successfully retrieved staging environment variable group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environmentVariableGroup'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.read
    patch:
      tags:
        - EnvironmentVariableGroups
      summary: Update staging environment variable group
      description: Update the environment variable group for staging applications.
      operationId: updateStagingEnvironmentVariableGroup
      requestBody:
        description: The environment variables to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                var:
                  type: object
                  additionalProperties:
                    type: string
                  description: Environment variables to inject; keys and values must be strings
      responses:
        '200':
          description: Successfully updated staging environment variable group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environmentVariableGroup'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 380001
                    title: CF-EnvironmentVariableGroupInvalid
                    detail: 'The Environment Variable Group is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.write
  /v3/deployments:
    get:
      security:
        - oauth:
            - cloud_controller.read
      tags:
        - Deployments
      summary: List deployments
      description: Retrieve a list of all deployments the user has access to.
      operationId: listDeployments
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - $ref: '#/components/parameters/labelSelector'
        - name: app_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of app GUIDs to filter by
        - name: states
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of deployment states to filter by
        - name: status_reasons
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of status reasons to filter by; valid values include DEPLOYING, PAUSED, CANCELING, DEPLOYED, CANCELED, SUPERSEDED
        - name: status_values
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of status values to filter by; valid values include ACTIVE and FINALIZED
      responses:
        '200':
          description: List of deployments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deploymentList'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
    post:
      tags:
        - Deployments
      summary: Create a deployment
      description: Create a new deployment.
      operationId: createDeployment
      requestBody:
        description: Deployment object that needs to be created
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                relationships:
                  $ref: '#/components/schemas/relationships'
                strategy:
                  type: string
                droplet:
                  $ref: '#/components/schemas/relationship'
                revision:
                  $ref: '#/components/schemas/relationship'
                options:
                  type: object
                  properties:
                    max_in_flight:
                      type: integer
                      description: The maximum number of new instances to deploy simultaneously
                metadata:
                  $ref: '#/components/schemas/metadata'
      responses:
        '201':
          description: Successfully created deployment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deployment'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100001
                    title: CF-AppInvalid
                    detail: 'The app is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      security:
        - oauth:
            - cloud_controller.write
  /v3/deployments/{guid}:
    get:
      tags:
        - Deployments
      summary: Retrieve a deployment
      description: Retrieve details of a specific deployment by its GUID.
      operationId: getDeployment
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        '200':
          description: Successfully retrieved deployment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deployment'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100001
                    title: CF-AppInvalid
                    detail: 'The app is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Deployment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 390014
                    title: CF-DeploymentsDisabled
                    detail: Deployments cannot be created due to manifest property 'temporary_disable_deployments'
      security:
        - oauth:
            - cloud_controller.read
    patch:
      tags:
        - Deployments
      summary: Update a deployment
      description: Update attributes of a specific deployment by its GUID.
      operationId: updateDeployment
      parameters:
        - $ref: '#/components/parameters/guid'
      requestBody:
        description: Deployment object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                metadata:
                  $ref: '#/components/schemas/metadata'
              description: Request schema for updating a deployment
      responses:
        '200':
          description: Successfully updated deployment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deployment'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100001
                    title: CF-AppInvalid
                    detail: 'The app is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Deployment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 390014
                    title: CF-DeploymentsDisabled
                    detail: Deployments cannot be created due to manifest property 'temporary_disable_deployments'
      security:
        - oauth:
            - cloud_controller.write
    delete:
      tags:
        - Deployments
      summary: Delete a deployment
      description: Delete a specific deployment by its GUID.
      operationId: deleteDeployment
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        '204':
          description: Successfully deleted deployment
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100001
                    title: CF-AppInvalid
                    detail: 'The app is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Deployment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 390014
                    title: CF-DeploymentsDisabled
                    detail: Deployments cannot be created due to manifest property 'temporary_disable_deployments'
      security:
        - oauth:
            - cloud_controller.write
  /v3/deployments/{guid}/actions/cancel:
    post:
      tags:
        - Deployments
      summary: Cancel a deployment
      description: Cancel a deployment in progress.
      operationId: cancelDeployment
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        '200':
          description: Successfully canceled deployment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deployment'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100001
                    title: CF-AppInvalid
                    detail: 'The app is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Deployment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 390014
                    title: CF-DeploymentsDisabled
                    detail: Deployments cannot be created due to manifest property 'temporary_disable_deployments'
      security:
        - oauth:
            - cloud_controller.write
  /v3/deployments/{guid}/actions/continue:
    post:
      tags:
        - Deployments
      summary: Continue a deployment
      description: Continue a paused deployment.
      operationId: continueDeployment
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        '200':
          description: Successfully continued deployment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deployment'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100001
                    title: CF-AppInvalid
                    detail: 'The app is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Deployment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 390014
                    title: CF-DeploymentsDisabled
                    detail: Deployments cannot be created due to manifest property 'temporary_disable_deployments'
      security:
        - oauth:
            - cloud_controller.write
  /v3/feature_flags:
    get:
      security:
        - oauth:
            - cloud_controller.read
      tags:
        - FeatureFlags
      summary: List feature flags
      description: Retrieve a list of all feature flags.
      operationId: listFeatureFlags
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - name: updated_ats
          in: query
          required: false
          schema:
            type: string
          description: |
            Timestamp to filter by. When filtering on equality, several comma-delimited timestamps may be passed.
      responses:
        '200':
          description: List of feature flags
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/featureFlagList'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
    post:
      tags:
        - FeatureFlags
      summary: Create a feature flag
      description: Create a new feature flag.
      operationId: createFeatureFlag
      requestBody:
        description: Feature flag object that needs to be created
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the feature flag
                enabled:
                  type: boolean
                  description: Whether the feature flag is enabled
                custom_error_message:
                  type: string
                  description: The error string returned by the API when a client performs an action disabled by the feature flag
              required:
                - name
                - enabled
      responses:
        '201':
          description: Successfully created feature flag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/featureFlag'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 330001
                    title: CF-FeatureFlagInvalid
                    detail: 'The feature flag is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      security:
        - oauth:
            - cloud_controller.write
  /v3/feature_flags/{name}:
    get:
      tags:
        - FeatureFlags
      summary: Retrieve a feature flag
      description: Retrieve details of a specific feature flag by its name.
      operationId: getFeatureFlag
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: The name of the feature flag
      responses:
        '200':
          description: Successfully retrieved feature flag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/featureFlag'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 330001
                    title: CF-FeatureFlagInvalid
                    detail: 'The feature flag is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Feature flag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 330000
                    title: CF-FeatureFlagNotFound
                    detail: 'The feature flag could not be found: %s'
      security:
        - oauth:
            - cloud_controller.read
    patch:
      tags:
        - FeatureFlags
      summary: Update a feature flag
      description: Update the properties of a specific feature flag by its name.
      operationId: updateFeatureFlag
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: The name of the feature flag
      requestBody:
        description: Feature flag object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enabled:
                  type: boolean
                  description: Whether the feature flag is enabled
                custom_error_message:
                  type: string
                  description: The error string returned by the API when a client performs an action disabled by the feature flag
      responses:
        '200':
          description: Successfully updated feature flag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/featureFlag'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 330001
                    title: CF-FeatureFlagInvalid
                    detail: 'The feature flag is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Feature flag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 330000
                    title: CF-FeatureFlagNotFound
                    detail: 'The feature flag could not be found: %s'
      security:
        - oauth:
            - cloud_controller.write
  /v3/builds:
    get:
      security:
        - oauth:
            - cloud_controller.read
      tags:
        - Builds
      summary: List builds
      description: Retrieve a list of all builds the user has access to.
      operationId: listBuilds
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - $ref: '#/components/parameters/labelSelector'
        - name: app_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of app GUIDs to filter by
        - name: package_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of package GUIDs to filter by
      responses:
        '200':
          description: List of builds
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/buildList'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
    post:
      tags:
        - Builds
      summary: Create a build
      description: Create a new build.
      operationId: createBuild
      requestBody:
        description: Build object that needs to be created
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                package:
                  $ref: '#/components/schemas/relationship'
                lifecycle:
                  $ref: '#/components/schemas/lifecycle'
                staging_memory_in_mb:
                  type: integer
                  description: Memory in MB allocated for staging of the build
                staging_disk_in_mb:
                  type: integer
                  description: Disk space in MB allocated for staging of the build
                staging_log_rate_limit_bytes_per_second:
                  type: integer
                  description: Log rate limit in bytes per second allocated for staging of the build
                metadata:
                  $ref: '#/components/schemas/metadata'
              required:
                - package
              description: Request schema for creating a build
      responses:
        '201':
          description: Successfully created build
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/build'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100001
                    title: CF-AppInvalid
                    detail: 'The app is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      security:
        - oauth:
            - cloud_controller.write
  /v3/builds/{guid}:
    get:
      tags:
        - Builds
      summary: Retrieve a build
      description: Retrieve details of a specific build by its GUID.
      operationId: getBuild
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        '200':
          description: Successfully retrieved build
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/build'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100001
                    title: CF-AppInvalid
                    detail: 'The app is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Build not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10008
                    title: CF-UnprocessableEntity
                    detail: '%s'
      security:
        - oauth:
            - cloud_controller.read
    patch:
      tags:
        - Builds
      summary: Update a build
      description: Update attributes of a specific build by its GUID.
      operationId: updateBuild
      parameters:
        - $ref: '#/components/parameters/guid'
      requestBody:
        description: Build object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                metadata:
                  $ref: '#/components/schemas/metadata'
              description: Request schema for updating a build
      responses:
        '200':
          description: Successfully updated build
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/build'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100001
                    title: CF-AppInvalid
                    detail: 'The app is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Build not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10008
                    title: CF-UnprocessableEntity
                    detail: '%s'
      security:
        - oauth:
            - cloud_controller.write
    delete:
      tags:
        - Builds
      summary: Delete a build
      description: Delete a specific build by its GUID.
      operationId: deleteBuild
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        '204':
          description: Successfully deleted build
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100001
                    title: CF-AppInvalid
                    detail: 'The app is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Build not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10008
                    title: CF-UnprocessableEntity
                    detail: '%s'
      security:
        - oauth:
            - cloud_controller.write
  /v3/apps/{app_guid}/builds:
    get:
      tags:
        - Builds
      summary: List builds for an app
      description: Retrieve a list of builds for a specific app.
      operationId: listBuildsForApp
      parameters:
        - name: app_guid
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - $ref: '#/components/parameters/labelSelector'
        - name: app_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of app GUIDs to filter by
        - name: package_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of package GUIDs to filter by
      responses:
        '200':
          description: List of builds for the app
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/buildList'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      security:
        - oauth:
            - cloud_controller.read
  /v3/audit_events:
    get:
      security:
        - oauth:
            - cloud_controller.read
      tags:
        - AuditEvents
      summary: List audit events
      description: Retrieve a list of all audit events the user has access to.
      operationId: listAuditEvents
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - $ref: '#/components/parameters/entityType'
        - name: type
          in: query
          schema:
            type: string
            description: |
              The type of the audit event
        - name: target_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: |
            Comma-delimited list of target GUIDs to filter by.
        - name: space_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: |
            Comma-delimited list of space GUIDs to filter by.
        - name: organization_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: |
            Comma-delimited list of organization GUIDs to filter by.
      responses:
        '200':
          description: List of audit events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auditEventList'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
    post:
      tags:
        - AuditEvents
      summary: Create an audit event
      description: Create a new audit event.
      operationId: createAuditEvent
      requestBody:
        description: Audit event object that needs to be created
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  description: The type of the event
                actor:
                  type: object
                  properties:
                    guid:
                      type: string
                      description: The unique identifier for the actor
                    type:
                      type: string
                      description: The actor type
                    name:
                      type: string
                      description: The name of the actor
                target:
                  type: object
                  properties:
                    guid:
                      type: string
                      description: The unique identifier for the target
                    type:
                      type: string
                      description: The target type
                    name:
                      type: string
                      description: The name of the target
                data:
                  type: object
                  description: Additional information about the event
                space:
                  type: object
                  properties:
                    guid:
                      type: string
                      description: The unique identifier for the space
                organization:
                  type: object
                  properties:
                    guid:
                      type: string
                      description: The unique identifier for the organization
                metadata:
                  $ref: '#/components/schemas/metadata'
      responses:
        '201':
          description: Successfully created audit event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auditEvent'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 170009
                    title: CF-NoCompatibleCell
                    detail: Found no compatible cell
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      security:
        - oauth:
            - cloud_controller.write
  /v3/audit_events/{guid}:
    get:
      tags:
        - AuditEvents
      summary: Retrieve an audit event
      description: Retrieve details of a specific audit event by its GUID.
      operationId: getAuditEvent
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        '200':
          description: Successfully retrieved audit event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auditEvent'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 170009
                    title: CF-NoCompatibleCell
                    detail: Found no compatible cell
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Audit event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 170009
                    title: CF-NoCompatibleCell
                    detail: Found no compatible cell
      security:
        - oauth:
            - cloud_controller.read
  /v3/apps/{app_guid}/features:
    get:
      tags:
        - AppFeatures
      summary: List app features
      description: Retrieve a list of features for a specific app.
      operationId: listAppFeatures
      parameters:
        - name: app_guid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of app features
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appFeatureList'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      security:
        - oauth:
            - cloud_controller.read
  /v3/apps:
    get:
      security:
        - oauth:
            - cloud_controller.read
      tags:
        - Apps
      summary: List apps
      description: Retrieve all apps the user has access to.
      operationId: listApps
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - $ref: '#/components/parameters/labelSelector'
        - name: guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of app GUIDs to filter by
        - name: names
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of app names to filter by
        - name: space_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of space GUIDs to filter by
        - name: organization_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of organization GUIDs to filter by
        - name: stacks
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of stack names to filter by
      responses:
        '200':
          description: List of apps
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appList'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500Unauthorized'
    post:
      tags:
        - Apps
      summary: Create an app
      description: Create a new app.
      operationId: createApp
      requestBody:
        description: App object that needs to be created
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the app
                relationships:
                  $ref: '#/components/schemas/relationships'
                lifecycle:
                  $ref: '#/components/schemas/lifecycle'
                metadata:
                  $ref: '#/components/schemas/metadata'
              required:
                - name
                - relationships
              description: Request schema for creating an app
      responses:
        '201':
          description: Successfully created app
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100001
                    title: CF-AppInvalid
                    detail: 'The app is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10008
                    title: CF-UnprocessableEntity
                    detail: '%s'
      security:
        - oauth:
            - cloud_controller.write
  /v3/apps/{guid}:
    get:
      tags:
        - Apps
      summary: Retrieve an app
      description: Retrieve details of a specific app by its GUID.
      operationId: getApp
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        '200':
          description: Successfully retrieved app
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100001
                    title: CF-AppInvalid
                    detail: 'The app is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: App not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100004
                    title: CF-AppNotFound
                    detail: 'The app could not be found: %s'
      security:
        - oauth:
            - cloud_controller.read
    patch:
      tags:
        - Apps
      summary: Update an app
      description: Update attributes of a specific app by its GUID.
      operationId: updateApp
      parameters:
        - $ref: '#/components/parameters/guid'
      requestBody:
        description: App object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the app
                lifecycle:
                  $ref: '#/components/schemas/lifecycle'
                metadata:
                  $ref: '#/components/schemas/metadata'
              required:
                - name
              description: Request schema for updating an app
      responses:
        '200':
          description: Successfully updated app
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100001
                    title: CF-AppInvalid
                    detail: 'The app is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: App not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100004
                    title: CF-AppNotFound
                    detail: 'The app could not be found: %s'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10008
                    title: CF-UnprocessableEntity
                    detail: '%s'
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.write
    delete:
      tags:
        - Apps
      summary: Delete an app
      description: Delete a specific app by its GUID.
      operationId: deleteApp
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        '204':
          description: Successfully deleted app
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100001
                    title: CF-AppInvalid
                    detail: 'The app is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: App not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100004
                    title: CF-AppNotFound
                    detail: 'The app could not be found: %s'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10008
                    title: CF-UnprocessableEntity
                    detail: '%s'
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.write
  /v3/apps/{guid}/actions/start:
    post:
      tags:
        - Apps
      summary: Start an app
      description: Start a specific app by its GUID.
      operationId: startApp
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        '200':
          description: Successfully started app
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100001
                    title: CF-AppInvalid
                    detail: 'The app is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: App not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100004
                    title: CF-AppNotFound
                    detail: 'The app could not be found: %s'
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.write
  /v3/apps/{guid}/actions/stop:
    post:
      tags:
        - Apps
      summary: Stop an app
      description: Stop a specific app by its GUID.
      operationId: stopApp
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        '200':
          description: Successfully stopped app
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100001
                    title: CF-AppInvalid
                    detail: 'The app is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: App not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100004
                    title: CF-AppNotFound
                    detail: 'The app could not be found: %s'
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.write
  /v3/apps/{guid}/actions/restart:
    post:
      tags:
        - Apps
      summary: Restart an app
      description: Stop and then start a specific app by its GUID.
      operationId: restartApp
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        '200':
          description: Successfully restarted app
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100001
                    title: CF-AppInvalid
                    detail: 'The app is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: App not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100004
                    title: CF-AppNotFound
                    detail: 'The app could not be found: %s'
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.write
  /v3/apps/{guid}/droplets/current:
    get:
      tags:
        - Apps
      summary: Get current droplet for an app
      description: Retrieve the current droplet for an app by its GUID.
      operationId: getCurrentDropletForApp
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        '200':
          description: Successfully retrieved current droplet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/droplet'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100001
                    title: CF-AppInvalid
                    detail: 'The app is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: App or droplet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100004
                    title: CF-AppNotFound
                    detail: 'The app could not be found: %s'
                  - code: 302
                    title: CF-AppNoResources
                    detail: Couldn't find a place to run an app
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.read
    patch:
      tags:
        - Apps
      summary: Set the current droplet for an app
      description: Set the current droplet for an app by its GUID.
      operationId: setCurrentDropletForApp
      parameters:
        - $ref: '#/components/parameters/guid'
      requestBody:
        description: Droplet relationship object that needs to be set
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/relationship'
              required:
                - data
              description: Request schema for setting the current droplet
      responses:
        '200':
          description: Successfully set current droplet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/relationship'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100001
                    title: CF-AppInvalid
                    detail: 'The app is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: App or droplet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100004
                    title: CF-AppNotFound
                    detail: 'The app could not be found: %s'
                  - code: 302
                    title: CF-AppNoResources
                    detail: Couldn't find a place to run an app
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.write
  /v3/apps/{guid}/features/{feature_name}:
    patch:
      tags:
        - AppFeatures
      summary: Update app feature
      description: Update the status of a specific feature for a given app.
      operationId: updateAppFeature
      parameters:
        - name: guid
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: feature_name
          in: path
          required: true
          schema:
            type: string
            description: The name of the app feature
      requestBody:
        description: App feature object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enabled:
                  type: boolean
                  description: Whether the app feature should be enabled
      responses:
        '200':
          description: Successfully updated app feature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appFeature'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 302
                    title: CF-AppNoResources
                    detail: Couldn't find a place to run an app
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: App feature not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 302
                    title: CF-AppNoResources
                    detail: Couldn't find a place to run an app
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10008
                    title: CF-UnprocessableEntity
                    detail: '%s'
      security:
        - oauth:
            - cloud_controller.write
  /v3/routes:
    post:
      tags:
        - Routes
      summary: Create a route
      description: Create a new route
      operationId: createRoute
      requestBody:
        $ref: '#/components/requestBodies/routeCreateRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/routeCreateResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 210001
                    title: CF-RouteInvalid
                    detail: 'The route is invalid: [detailed message]'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      security:
        - oauth:
            - cloud_controller.write
    get:
      tags:
        - Routes
      summary: List routes
      description: Retrieve a list of routes available in the system.
      operationId: listRoutes
      security:
        - oauth:
            - cloud_controller.read
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - $ref: '#/components/parameters/labelSelector'
        - name: protocols
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of protocols to filter by
        - name: hosts
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of hosts to filter by
        - name: paths
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of paths to filter by
        - name: ports
          in: query
          schema:
            type: array
            items:
              type: integer
          description: Comma-delimited list of ports to filter by
        - name: domain_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of domain GUIDs to filter by
        - name: space_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of space GUIDs to filter by
      responses:
        '200':
          $ref: '#/components/responses/routeListResponse'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
  /v3/routes/{guid}/destinations:
    get:
      tags:
        - Routes
      summary: List destinations for a route
      description: Retrieve a list of destinations for a specific route by its GUID.
      operationId: listDestinationsForRoute
      parameters:
        - $ref: '#/components/parameters/guid'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
      responses:
        '200':
          description: List of destinations for the route
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routeDestinationList'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10005
                    title: CF-BadQueryParameter
                    detail: 'The query parameter is invalid: [detailed message]'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
      security:
        - oauth:
            - cloud_controller.read
    post:
      tags:
        - Routes
      summary: Insert destinations for a route
      description: Insert destinations for a specific route by its GUID.
      operationId: insertDestinationsForRoute
      parameters:
        - $ref: '#/components/parameters/guid'
      requestBody:
        $ref: '#/components/requestBodies/routeDestinations'
      responses:
        '200':
          description: List of destinations for the route
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routeDestinationList'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10005
                    title: CF-BadQueryParameter
                    detail: 'The query parameter is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10008
                    title: CF-UnprocessableEntity
                    detail: '%s'
      security:
        - oauth:
            - cloud_controller.write
    put:
      tags:
        - Routes
      summary: Replace all destinations for a route
      description: Replace all destinations for a specific route by its GUID.
      operationId: replaceDestinationsForRoute
      parameters:
        - $ref: '#/components/parameters/guid'
      requestBody:
        $ref: '#/components/requestBodies/routeDestinations'
      responses:
        '200':
          description: List of destinations for the route
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routeDestinationList'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10005
                    title: CF-BadQueryParameter
                    detail: 'The query parameter is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10008
                    title: CF-UnprocessableEntity
                    detail: '%s'
      security:
        - oauth:
            - cloud_controller.write
  /v3/routes/{guid}/destinations/{destination_guid}:
    patch:
      tags:
        - Routes
      summary: Update a destination protocol for a route
      description: Update the protocol of a specific route destination by its GUID.
      operationId: updateDestinationProtocolForRoute
      parameters:
        - $ref: '#/components/parameters/guid'
        - name: destination_guid
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The GUID of the route destination
      requestBody:
        description: Protocol of the destination
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                protocol:
                  type: string
                  description: Protocol of the destination
                  enum:
                    - http1
                    - http2
              required:
                - protocol
      responses:
        '200':
          description: Successfully updated protocol of the destination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routeDestination'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10005
                    title: CF-BadQueryParameter
                    detail: 'The query parameter is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Destination not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10010
                    title: CF-ResourceNotFound
                    detail: '%s'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10008
                    title: CF-UnprocessableEntity
                    detail: '%s'
      security:
        - oauth:
            - cloud_controller.write
    delete:
      tags:
        - Routes
      summary: Remove destination for a route
      description: Remove a destination from a specific route by its GUID.
      operationId: removeDestinationForRoute
      parameters:
        - $ref: '#/components/parameters/guid'
        - name: destination_guid
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The GUID of the route destination to remove
      responses:
        '204':
          description: Successfully removed destination from the route
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10005
                    title: CF-BadQueryParameter
                    detail: 'The query parameter is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Destination not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10010
                    title: CF-ResourceNotFound
                    detail: '%s'
      security:
        - oauth:
            - cloud_controller.write
  /v3/spaces/{guid}/routes:
    delete:
      tags:
        - Routes
      summary: Delete unmapped routes for a space
      description: Delete routes that are unmapped in a specific space.
      operationId: deleteUnmappedRoutesForSpace
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        '204':
          description: Successfully deleted unmapped routes from the space
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Space not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 40004
                    title: CF-SpaceNotFound
                    detail: 'The app space could not be found: %s'
      security:
        - oauth:
            - cloud_controller.write
  /v3/roles:
    get:
      tags:
        - Roles
      summary: List roles
      description: Retrieve all roles the user has access to.
      operationId: listRoles
      security:
        - oauth:
            - cloud_controller.read
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - $ref: '#/components/parameters/labelSelector'
        - name: guids
          in: query
          description: Comma-delimited list of role guids to filter by
          schema:
            type: array
            items:
              type: string
        - name: types
          in: query
          description: Comma-delimited list of role types to filter by
          schema:
            type: array
            items:
              type: string
              enum:
                - organization_user
                - organization_auditor
                - organization_manager
                - organization_billing_manager
                - space_auditor
                - space_developer
                - space_manager
                - space_supporter
        - name: organization_guids
          in: query
          description: Comma-delimited list of organization guids to filter by
          schema:
            type: array
            items:
              type: string
        - name: space_guids
          in: query
          description: Comma-delimited list of space guids to filter by
          schema:
            type: array
            items:
              type: string
        - name: user_guids
          in: query
          description: Comma-delimited list of user guids to filter by
          schema:
            type: array
            items:
              type: string
        - name: include
          in: query
          description: Optionally include additional related resources in the response; valid values are `user`, `space`, and `organization`.
          schema:
            type: array
            items:
              type: string
              enum:
                - user
                - space
                - organization
      responses:
        '200':
          $ref: '#/components/responses/RoleListResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10005
                    title: CF-BadQueryParameter
                    detail: 'The query parameter is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500Unauthorized'
    post:
      tags:
        - Roles
      summary: Create a role
      description: Create a new role.
      operationId: createRole
      requestBody:
        $ref: '#/components/requestBodies/RoleCreate'
      responses:
        '201':
          $ref: '#/components/responses/RoleCreateResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.write
  /v3/roles/{guid}:
    get:
      tags:
        - Roles
      summary: Get a role
      description: Retrieve a specific role by its GUID.
      operationId: getRole
      security:
        - oauth:
            - cloud_controller.read
      parameters:
        - $ref: '#/components/parameters/guid'
        - name: include
          in: query
          description: Optionally include additional related resources in the response; valid values are `user`, `space`, and `organization`.
          schema:
            type: array
            items:
              type: string
              enum:
                - user
                - space
                - organization
      responses:
        '200':
          $ref: '#/components/responses/RoleGetResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10005
                    title: CF-BadQueryParameter
                    detail: 'The query parameter is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10010
                    title: CF-ResourceNotFound
                    detail: '%s'
        '500':
          $ref: '#/components/responses/500Unauthorized'
    delete:
      tags:
        - Roles
      summary: Delete a role
      description: Delete a specific role by its GUID.
      operationId: deleteRole
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10005
                    title: CF-BadQueryParameter
                    detail: 'The query parameter is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10010
                    title: CF-ResourceNotFound
                    detail: '%s'
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.write
  /:
    get:
      tags:
        - Root
      summary: Get root
      description: The Root endpoint provides the entry point for the Cloud Foundry API. It includes links to all the available resources and endpoints.
      operationId: getRoot
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  links:
                    type: object
                    properties:
                      self:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the current endpoint
                      apps:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Apps endpoint
                      buildpacks:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Buildpacks endpoint
                      builds:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Builds endpoint
                      deployments:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Deployments endpoint
                      domains:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Domains endpoint
                      droplets:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Droplets endpoint
                      environment_variable_groups:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Environment Variable Groups endpoint
                      feature_flags:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Feature Flags endpoint
                      info:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Info endpoint
                      isolation_segments:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Isolation Segments endpoint
                      jobs:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Jobs endpoint
                      organization_quotas:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Organization Quotas endpoint
                      organizations:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Organizations endpoint
                      packages:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Packages endpoint
                      processes:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Processes endpoint
                      resource_matches:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Resource Matches endpoint
                      roles:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Roles endpoint
                      routes:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Routes endpoint
                      security_groups:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Security Groups endpoint
                      service_brokers:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Service Brokers endpoint
                      service_credential_bindings:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Service Credential Bindings endpoint
                      service_instances:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Service Instances endpoint
                      service_offerings:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Service Offerings endpoint
                      service_plans:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Service Plans endpoint
                      service_plan_visibilities:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Service Plan Visibilities endpoint
                      service_route_bindings:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Service Route Bindings endpoint
                      service_usage_events:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Service Usage Events endpoint
                      sidecars:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Sidecars endpoint
                      space_quotas:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Space Quotas endpoint
                      spaces:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Spaces endpoint
                      stacks:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Stacks endpoint
                      tasks:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Tasks endpoint
                      users:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the Users endpoint
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500Unauthorized'
  /v3:
    get:
      tags:
        - Root
      summary: Get v3 root
      description: The v3 Root endpoint provides the entry point for the Cloud Foundry API. It includes links to all the available resources and endpoints.
      operationId: getRootV3
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  links:
                    type: object
                    properties:
                      self:
                        $ref: '#/components/schemas/link'
                      app_usage_events:
                        $ref: '#/components/schemas/link'
                      apps:
                        $ref: '#/components/schemas/link'
                      audit_events:
                        $ref: '#/components/schemas/link'
                      buildpacks:
                        $ref: '#/components/schemas/link'
                      builds:
                        $ref: '#/components/schemas/link'
                      deployments:
                        $ref: '#/components/schemas/link'
                      domains:
                        $ref: '#/components/schemas/link'
                      droplets:
                        $ref: '#/components/schemas/link'
                      environment_variable_groups:
                        $ref: '#/components/schemas/link'
                      feature_flags:
                        $ref: '#/components/schemas/link'
                      info:
                        $ref: '#/components/schemas/link'
                      isolation_segments:
                        $ref: '#/components/schemas/link'
                      organizations:
                        $ref: '#/components/schemas/link'
                      organization_quotas:
                        $ref: '#/components/schemas/link'
                      packages:
                        $ref: '#/components/schemas/link'
                      processes:
                        $ref: '#/components/schemas/link'
                      resource_matches:
                        $ref: '#/components/schemas/link'
                      roles:
                        $ref: '#/components/schemas/link'
                      routes:
                        $ref: '#/components/schemas/link'
                      security_groups:
                        $ref: '#/components/schemas/link'
                      service_brokers:
                        $ref: '#/components/schemas/link'
                      service_instances:
                        $ref: '#/components/schemas/link'
                      service_credential_bindings:
                        $ref: '#/components/schemas/link'
                      service_offerings:
                        $ref: '#/components/schemas/link'
                      service_plans:
                        $ref: '#/components/schemas/link'
                      service_route_bindings:
                        $ref: '#/components/schemas/link'
                      service_usage_events:
                        $ref: '#/components/schemas/link'
                      spaces:
                        $ref: '#/components/schemas/link'
                      space_quotas:
                        $ref: '#/components/schemas/link'
                      stacks:
                        $ref: '#/components/schemas/link'
                      tasks:
                        $ref: '#/components/schemas/link'
                      users:
                        $ref: '#/components/schemas/link'
              example:
                links:
                  self:
                    href: http://127.0.0.1:4010/v3
                  app_usage_events:
                    href: http://127.0.0.1:4010/v3/app_usage_events
                  apps:
                    href: http://127.0.0.1:4010/v3/apps
                  audit_events:
                    href: http://127.0.0.1:4010/v3/audit_events
                  buildpacks:
                    href: http://127.0.0.1:4010/v3/buildpacks
                  builds:
                    href: http://127.0.0.1:4010/v3/builds
                  deployments:
                    href: http://127.0.0.1:4010/v3/deployments
                  domains:
                    href: http://127.0.0.1:4010/v3/domains
                  droplets:
                    href: http://127.0.0.1:4010/v3/droplets
                  environment_variable_groups:
                    href: http://127.0.0.1:4010/v3/environment_variable_groups
                  feature_flags:
                    href: http://127.0.0.1:4010/v3/feature_flags
                  info:
                    href: http://127.0.0.1:4010/v3/info
                  isolation_segments:
                    href: http://127.0.0.1:4010/v3/isolation_segments
                  organizations:
                    href: http://127.0.0.1:4010/v3/organizations
                  organization_quotas:
                    href: http://127.0.0.1:4010/v3/organization_quotas
                  packages:
                    href: http://127.0.0.1:4010/v3/packages
                  processes:
                    href: http://127.0.0.1:4010/v3/processes
                  resource_matches:
                    href: http://127.0.0.1:4010/v3/resource_matches
                  roles:
                    href: http://127.0.0.1:4010/v3/roles
                  routes:
                    href: http://127.0.0.1:4010/v3/routes
                  security_groups:
                    href: http://127.0.0.1:4010/v3/security_groups
                  service_brokers:
                    href: http://127.0.0.1:4010/v3/service_brokers
                  service_instances:
                    href: http://127.0.0.1:4010/v3/service_instances
                  service_credential_bindings:
                    href: http://127.0.0.1:4010/v3/service_credential_bindings
                  service_offerings:
                    href: http://127.0.0.1:4010/v3/service_offerings
                  service_plans:
                    href: http://127.0.0.1:4010/v3/service_plans
                  service_route_bindings:
                    href: http://127.0.0.1:4010/v3/service_route_bindings
                  service_usage_events:
                    href: http://127.0.0.1:4010/v3/service_usage_events
                  spaces:
                    href: http://127.0.0.1:4010/v3/spaces
                  space_quotas:
                    href: http://127.0.0.1:4010/v3/space_quotas
                  stacks:
                    href: http://127.0.0.1:4010/v3/stacks
                  tasks:
                    href: http://127.0.0.1:4010/v3/tasks
                  users:
                    href: http://127.0.0.1:4010/v3/users
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500Unauthorized'
  /v3/apps/{guid}/revisions:
    get:
      tags:
        - Revisions
      summary: List revisions for an app
      description: Retrieve a list of revisions for a specific app.
      operationId: listRevisionsForApp
      parameters:
        - $ref: '#/components/parameters/guid'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - $ref: '#/components/parameters/labelSelector'
        - name: versions
          in: query
          schema:
            type: array
            items:
              type: integer
          description: Filter by revision versions
      responses:
        '200':
          description: List of revisions for the app
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/revisionList'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100001
                    title: CF-AppInvalid
                    detail: 'The app is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: App not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100004
                    title: CF-AppNotFound
                    detail: 'The app could not be found: %s'
      security:
        - oauth:
            - cloud_controller.read
  /v3/apps/{guid}/revisions/deployed:
    get:
      tags:
        - Revisions
      summary: List deployed revisions for an app
      description: Retrieve a list of deployed revisions for a specific app.
      operationId: listDeployedRevisionsForApp
      parameters:
        - $ref: '#/components/parameters/guid'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - $ref: '#/components/parameters/labelSelector'
        - name: versions
          in: query
          schema:
            type: array
            items:
              type: integer
          description: Filter by revision versions
      responses:
        '200':
          description: List of deployed revisions for the app
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/revisionList'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100001
                    title: CF-AppInvalid
                    detail: 'The app is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: App not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100004
                    title: CF-AppNotFound
                    detail: 'The app could not be found: %s'
      security:
        - oauth:
            - cloud_controller.read
  /v3/apps/{guid}/revisions/{version}:
    get:
      tags:
        - Revisions
      summary: Get a revision
      description: Retrieve a specific revision of an app by its version number.
      operationId: getRevision
      parameters:
        - $ref: '#/components/parameters/guid'
        - name: version
          in: path
          required: true
          schema:
            type: integer
            description: The version number of the revision
      responses:
        '200':
          description: Successfully retrieved revision
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/revision'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100001
                    title: CF-AppInvalid
                    detail: 'The app is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: App or revision not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100004
                    title: CF-AppNotFound
                    detail: 'The app could not be found: %s'
      security:
        - oauth:
            - cloud_controller.read
    patch:
      tags:
        - Revisions
      summary: Update a revision
      description: Update a revision of an app by its version number.
      operationId: updateRevision
      parameters:
        - $ref: '#/components/parameters/guid'
        - name: version
          in: path
          required: true
          schema:
            type: integer
            description: The version number of the revision
      requestBody:
        $ref: '#/components/requestBodies/revisionUpdateRequestBody'
      responses:
        '200':
          description: Successfully updated revision
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/revision'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100001
                    title: CF-AppInvalid
                    detail: 'The app is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: App or revision not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100004
                    title: CF-AppNotFound
                    detail: 'The app could not be found: %s'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10008
                    title: CF-UnprocessableEntity
                    detail: '%s'
      security:
        - oauth:
            - cloud_controller.write
  /v3/apps/{guid}/revisions/{version}/environment_variables:
    get:
      tags:
        - Revisions
      summary: Get environment variables for a revision
      description: Retrieve the environment variables associated with a specific revision of an app.
      operationId: getEnvironmentVariablesForRevision
      parameters:
        - $ref: '#/components/parameters/guid'
        - name: version
          in: path
          required: true
          schema:
            type: integer
            description: The version number of the revision
      responses:
        '200':
          description: Successfully retrieved environment variables
          content:
            application/json:
              schema:
                type: object
                properties:
                  var:
                    type: object
                    additionalProperties:
                      type: string
                    description: Environment variables for the revision
                  links:
                    type: object
                    properties:
                      self:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the current endpoint
                      revision:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the revision
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100001
                    title: CF-AppInvalid
                    detail: 'The app is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: App or revision not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100004
                    title: CF-AppNotFound
                    detail: 'The app could not be found: %s'
      security:
        - oauth:
            - cloud_controller.read
  /v3/packages:
    get:
      tags:
        - Packages
      summary: List packages
      description: Retrieve a list of all packages the user has access to.
      operationId: listPackages
      security:
        - oauth:
            - cloud_controller.read
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - $ref: '#/components/parameters/labelSelector'
        - name: guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of package guids to filter by
        - name: states
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of package states to filter by
        - name: types
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of package types to filter by
        - name: app_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of app guids to filter by
        - name: space_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of space guids to filter by
        - name: organization_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of organization guids to filter by
      responses:
        '200':
          description: List of packages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/packageList'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500Unauthorized'
    post:
      tags:
        - Packages
      summary: Create a package
      description: Create a new package.
      operationId: createPackage
      requestBody:
        $ref: '#/components/requestBodies/packageCreateRequestBody'
      responses:
        '201':
          description: Successfully created package
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/package'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 150001
                    title: CF-AppPackageInvalid
                    detail: 'The app package is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10008
                    title: CF-UnprocessableEntity
                    detail: '%s'
      security:
        - oauth:
            - cloud_controller.write
  /v3/packages/{guid}:
    get:
      tags:
        - Packages
      summary: Get a package
      description: Retrieve a specific package by its GUID.
      operationId: getPackage
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        '200':
          description: Successfully retrieved package
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/package'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10005
                    title: CF-BadQueryParameter
                    detail: 'The query parameter is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 150002
                    title: CF-AppPackageNotFound
                    detail: 'The app package could not be found: %s'
      security:
        - oauth:
            - cloud_controller.read
    patch:
      tags:
        - Packages
      summary: Update a package
      description: Update attributes of a specific package by its GUID.
      operationId: updatePackage
      parameters:
        - $ref: '#/components/parameters/guid'
      requestBody:
        $ref: '#/components/requestBodies/packageUpdateRequestBody'
      responses:
        '200':
          description: Successfully updated package
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/package'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 150001
                    title: CF-AppPackageInvalid
                    detail: 'The app package is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 150002
                    title: CF-AppPackageNotFound
                    detail: 'The app package could not be found: %s'
      security:
        - oauth:
            - cloud_controller.write
    delete:
      tags:
        - Packages
      summary: Delete a package
      description: Delete a specific package by its GUID.
      operationId: deletePackage
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        '202':
          description: Successfully deleted package
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 150001
                    title: CF-AppPackageInvalid
                    detail: 'The app package is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 150002
                    title: CF-AppPackageNotFound
                    detail: 'The app package could not be found: %s'
      security:
        - oauth:
            - cloud_controller.write
  /v3/packages/{guid}/upload:
    post:
      tags:
        - Packages
      summary: Upload package bits
      description: Upload the bits for a specific package by its GUID.
      operationId: uploadPackageBits
      parameters:
        - $ref: '#/components/parameters/guid'
      requestBody:
        $ref: '#/components/requestBodies/packageUploadRequestBody'
      responses:
        '200':
          description: Successfully uploaded package bits
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/package'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 150004
                    title: CF-PackageBitsAlreadyUploaded
                    detail: Bits may be uploaded only once. Create a new package to upload different bits.
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 150002
                    title: CF-AppPackageNotFound
                    detail: 'The app package could not be found: %s'
      security:
        - oauth:
            - cloud_controller.write
  /v3/packages/{guid}/download:
    get:
      tags:
        - Packages
      summary: Download package bits
      description: Download the bits for a specific package by its GUID.
      operationId: downloadPackageBits
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        '200':
          description: Successfully downloaded package bits
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/package'
        '302':
          description: Redirect to download location
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 150002
                    title: CF-AppPackageNotFound
                    detail: 'The app package could not be found: %s'
      security:
        - oauth:
            - cloud_controller.read
  /v3/apps/{guid}/packages:
    get:
      tags:
        - Packages
      summary: List packages for an app
      description: Retrieve a list of packages for a specific app.
      operationId: listPackagesForApp
      parameters:
        - name: guid
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - $ref: '#/components/parameters/labelSelector'
        - name: guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of package guids to filter by
        - name: states
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of package states to filter by
        - name: types
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of package types to filter by
      responses:
        '200':
          description: List of packages for the app
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/packageList'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100001
                    title: CF-AppInvalid
                    detail: 'The app is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: App not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 100004
                    title: CF-AppNotFound
                    detail: 'The app could not be found: %s'
      security:
        - oauth:
            - cloud_controller.read
  /v3/jobs/{guid}:
    get:
      tags:
        - Jobs
      summary: Get a job
      description: Retrieve a specific job by its GUID.
      operationId: getJob
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        '200':
          description: Successfully retrieved job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10010
                    title: CF-ResourceNotFound
                    detail: '%s'
      security:
        - oauth:
            - cloud_controller.read
  /v3/jobs:
    get:
      tags:
        - Jobs
      summary: List jobs
      description: Retrieve a list of all jobs the user has access to.
      operationId: listJobs
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - $ref: '#/components/parameters/labelSelector'
        - name: guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of job guids to filter by
        - name: states
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of job states to filter by
        - name: operations
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of operation types to filter by
        - name: resource_guids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Comma-delimited list of resource guids to filter by
      responses:
        '200':
          description: List of jobs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobList'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.read
  /v3/info:
    get:
      tags:
        - Info
      summary: Get platform info
      description: Returns information about the platform.
      operationId: getPlatformInfo
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/platformInfo'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500Unauthorized'
  /v3/info/usage_summary:
    get:
      tags:
        - Info
      summary: Get platform usage summary
      description: This endpoint retrieves a high-level summary of usage across the entire Cloud Foundry installation.
      operationId: getPlatformUsageSummary
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  usage_summary:
                    type: object
                    description: |-
                      Usage summary object

                      Name                    Type     Description
                      started_instances        integer Total number of process instances in the STARTED state
                      memory_in_mb            integer Sum of memory usage of all tasks in the RUNNING state and all process instances in the STARTED state
                    properties:
                      started_instances:
                        type: integer
                        description: Total number of process instances in the STARTED state
                      memory_in_mb:
                        type: integer
                        description: Sum of memory usage of all tasks in the RUNNING state and all process instances in the STARTED state
                  links:
                    type: object
                    description: Links to related resources
                    properties:
                      self:
                        allOf:
                          - $ref: '#/components/schemas/link'
                          - description: Link to the current endpoint
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.admin
            - cloud_controller.admin_read_only
            - cloud_controller.global_auditor
  /v3/app_usage_events:
    get:
      tags:
        - AppUsageEvents
      summary: List app usage events
      description: Retrieve all app usage events the user has access to.
      operationId: listAppUsageEvents
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - name: after_guid
          in: query
          description: Filters out events before and including the event with the given guid.
          schema:
            type: string
        - name: guids
          in: query
          description: Comma-delimited list of usage event guids to filter by.
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appUsageEventList'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.admin
            - cloud_controller.admin_read_only
            - cloud_controller.global_auditor
  /v3/app_usage_events/{guid}:
    get:
      tags:
        - AppUsageEvents
      summary: Get an app usage event
      description: Retrieve a specific app usage event by its GUID.
      operationId: getAppUsageEvent
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appUsageEvent'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: App usage event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10010
                    title: CF-ResourceNotFound
                    detail: '%s'
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.admin
            - cloud_controller.admin_read_only
            - cloud_controller.global_auditor
  /v3/app_usage_events/actions/destructively_purge_all_and_reseed:
    post:
      tags:
        - AppUsageEvents
      summary: Purge and seed app usage events
      description: |-
        Destroys all existing events. Populates new usage events, one for each
        started app. All populated events will have a created_at value of
        current time. There is the potential race condition if apps are
        currently being started, stopped, or scaled. The seeded usage events
        will have the same guid as the app.
      operationId: purgeAndSeedAppUsageEvents
      responses:
        '202':
          description: Accepted
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.admin
  /v3/isolation_segments:
    get:
      tags:
        - IsolationSegments
      summary: List isolation segments
      description: Retrieve all isolation segments the user has access to.
      operationId: listIsolationSegments
      security:
        - oauth:
            - cloud_controller.read
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/createdAts'
        - $ref: '#/components/parameters/updatedAts'
        - $ref: '#/components/parameters/labelSelector'
        - name: guids
          in: query
          description: Comma-delimited list of isolation segment guids to filter by.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: names
          in: query
          description: Comma-delimited list of isolation segment names to filter by.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: organization_guids
          in: query
          description: Comma-delimited list of organization guids to filter by.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/isolationSegmentList'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10005
                    title: CF-BadQueryParameter
                    detail: 'The query parameter is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500Unauthorized'
    post:
      tags:
        - IsolationSegments
      summary: Create an isolation segment
      description: Create a new isolation segment.
      operationId: createIsolationSegment
      security:
        - oauth:
            - cloud_controller.admin
      requestBody:
        $ref: '#/components/requestBodies/isolationSegmentCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/isolationSegment'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10005
                    title: CF-BadQueryParameter
                    detail: 'The query parameter is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500Unauthorized'
  /v3/isolation_segments/{guid}:
    get:
      tags:
        - IsolationSegments
      summary: Get an isolation segment
      description: Retrieve a specific isolation segment by its GUID.
      operationId: getIsolationSegment
      security:
        - oauth:
            - cloud_controller.read
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/isolationSegment'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10005
                    title: CF-BadQueryParameter
                    detail: 'The query parameter is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Isolation segment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10010
                    title: CF-ResourceNotFound
                    detail: '%s'
        '500':
          $ref: '#/components/responses/500Unauthorized'
    patch:
      tags:
        - IsolationSegments
      summary: Update an isolation segment
      description: Update a specific isolation segment by its GUID.
      operationId: updateIsolationSegment
      security:
        - oauth:
            - cloud_controller.admin
      parameters:
        - $ref: '#/components/parameters/guid'
      requestBody:
        description: Isolation segment to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the isolation segment
                metadata:
                  $ref: '#/components/schemas/metadata'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/isolationSegment'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10005
                    title: CF-BadQueryParameter
                    detail: 'The query parameter is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Isolation segment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10010
                    title: CF-ResourceNotFound
                    detail: '%s'
        '500':
          $ref: '#/components/responses/500Unauthorized'
    delete:
      tags:
        - IsolationSegments
      summary: Delete an isolation segment
      description: Delete a specific isolation segment by its GUID.
      operationId: deleteIsolationSegment
      parameters:
        - $ref: '#/components/parameters/guid'
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10005
                    title: CF-BadQueryParameter
                    detail: 'The query parameter is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Isolation segment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10010
                    title: CF-ResourceNotFound
                    detail: '%s'
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.admin
  /v3/isolation_segments/{guid}/relationships/organizations:
    post:
      tags:
        - IsolationSegments
      summary: Entitle organizations for isolation segment
      description: This endpoint entitles the specified organizations for the isolation segment. In the case where the specified isolation segment is the system-wide shared segment, and if an organization is not already entitled for any other isolation segment, then the shared isolation segment automatically gets assigned as the default for that organization.
      operationId: entitleOrganizationsForIsolationSegment
      parameters:
        - $ref: '#/components/parameters/guid'
      requestBody:
        description: List of organizations to entitle
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/relationshipToMany'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/relationshipToMany'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10005
                    title: CF-BadQueryParameter
                    detail: 'The query parameter is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Isolation segment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10010
                    title: CF-ResourceNotFound
                    detail: '%s'
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.admin
    get:
      tags:
        - IsolationSegments
      summary: List organizations
      description: List all organizations entitled to the isolation segment.
      operationId: listOrganizationsForIsolationSegment
      parameters:
        - $ref: '#/components/parameters/guid'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/relationshipToMany'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10005
                    title: CF-BadQueryParameter
                    detail: 'The query parameter is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Isolation segment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10010
                    title: CF-ResourceNotFound
                    detail: '%s'
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.read
  /v3/isolation_segments/{guid}/relationships/organizations/{org_guid}:
    delete:
      tags:
        - IsolationSegments
      summary: Revoke entitlement of an organization
      description: Revoke the entitlement of an organization for an isolation segment.
      operationId: revokeIsolationSegmentForOrganization
      parameters:
        - $ref: '#/components/parameters/guid'
        - name: org_guid
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The GUID of the organization to revoke entitlement from.
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10005
                    title: CF-BadQueryParameter
                    detail: 'The query parameter is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Isolation segment or organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10010
                    title: CF-ResourceNotFound
                    detail: '%s'
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.admin
  /v3/isolation_segments/{guid}/relationships/spaces:
    get:
      tags:
        - IsolationSegments
      summary: List spaces
      description: List all spaces assigned to the isolation segment.
      operationId: listSpacesForIsolationSegment
      parameters:
        - $ref: '#/components/parameters/guid'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/relationshipToMany'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10005
                    title: CF-BadQueryParameter
                    detail: 'The query parameter is invalid: %s'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          description: Isolation segment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
              example:
                errors:
                  - code: 10010
                    title: CF-ResourceNotFound
                    detail: '%s'
        '500':
          $ref: '#/components/responses/500Unauthorized'
      security:
        - oauth:
            - cloud_controller.read
components:
  securitySchemes:
    oauth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://uaa.cloudfoundry.local/api-oauth/dialog
          scopes:
            cloud_controller.admin: This scope provides read and write access to all resources
            cloud_controller.admin_read_only: This scope provides read only access to all resources
            cloud_controller.global_auditor: This scope provides read access to all resources
            cloud_controller.read: Read access to the Cloud Controller
            cloud_controller.write: Write access to the Cloud Controller
            cloud_controller.update_build_state: This scope allows its bearer to update the state of a build; currently only used when updating builds
            cloud_controller_service_permissions.read: This scope provides read only access for service instance permissions
    bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Bearer JWT token authentication
  parameters:
    page:
      name: page
      in: query
      required: false
      schema:
        type: integer
      description: Page to display; valid values are integers >= 1
    perPage:
      name: perPage
      in: query
      required: false
      schema:
        type: integer
      description: Number of results per page, valid values are 1 through 5000
    orderBy:
      name: order_by
      in: query
      required: false
      schema:
        type: string
      description: |
        Order results by a specific field. Prepend with - to sort descending.
    createdAts:
      name: created_ats
      in: query
      required: false
      schema:
        type: string
      description: |
        Timestamp to filter by. When filtering on equality, several comma-delimited timestamps may be passed.
    updatedAts:
      name: updated_ats
      in: query
      required: false
      schema:
        type: string
      description: |
        Timestamp to filter by. When filtering on equality, several comma-delimited timestamps may be passed.
    labelSelector:
      name: label_selector
      in: query
      description: |
        Selectors allow users to filter and group API resources by the labels applied to them. A selector consists of one or more requirements in a comma-delimited list. The maximum number of requirements in a single selector is 50.

        Example label selector:
        `cf curl /v3/apps?label_selector=env=dev,%21chargeback-code,tier%20in%20%28backend,worker%29`

        Selectors can be used to filter and group resources using the query parameter `label_selector` on list endpoints.

        When included in a URL, the selector must be appropriately escaped.

        A requirement consists of a key, an operator, and optional value(s).

        | Requirement    | Format                        | Description                                                                 |
        |----------------|-------------------------------|-----------------------------------------------------------------------------|
        | existence      | `key`                         | Returns all resources that have been assigned a label with the given key (with any value) |
        | non-existence  | `!key`                        | Returns all resources that have not been assigned a label with the given key (with any value) |
        | equality       | `key=value` or `key==value`   | Returns all resources that have been assigned a label with the given key and value |
        | inequality     | `key!=value`                  | Returns all resources that either have not been assigned a label with the given key or have a label with the given key but a different value |
        | set inclusion  | `key in (value1,value2…)`     | Returns all resources that have been assigned a label with the given key with one of the specified value(s) |
        | set exclusion  | `key notin (value1,value2…)`  | Returns all resources that either have not been assigned a label with the given key or have a label with the given key but none of the specified value(s) |
      required: false
      schema:
        type: string
    guid:
      name: guid
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: The GUID of the resource
    dropletGuid:
      name: droplet_guid
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: The GUID of the droplet
    entityType:
      name: entity_type
      in: query
      required: false
      schema:
        type: string
      description: |
        The type of the entity involved in the audit event. This can be used to filter audit events by the entity involved. For example, filtering by `type` can return audit events involving only apps, spaces, or organizations.
  schemas:
    link:
      type: object
      properties:
        href:
          type: string
          format: uri
          description: The URL of the link
        method:
          type: string
          description: An optional field containing the HTTP method to be used when following the URL
      required:
        - href
      description: |
        Each link is keyed by its type and will include a href for the URL and an optional method for links that cannot be followed using GET.
    pagination:
      type: object
      properties:
        total_results:
          type: integer
          description: The total number of results available
        total_pages:
          type: integer
          description: The total number of pages available
        first:
          allOf:
            - $ref: '#/components/schemas/link'
            - description: The first page of results
        last:
          allOf:
            - $ref: '#/components/schemas/link'
            - description: The last page of results
        next:
          allOf:
            - $ref: '#/components/schemas/link'
            - description: The next page of results
        previous:
          allOf:
            - $ref: '#/components/schemas/link'
            - description: The previous page of results
      description: |
        Pagination is a technique used to divide a large set of results into smaller, more manageable sets. This allows clients to retrieve results in smaller chunks, reducing the amount of data transferred and improving performance.
        The pagination object is a JSON object that contains information about the pagination state of the results. It includes the total number of results available, the total number of pages available, and links to the first, last, next, and previous pages of results.
    baseSchema:
      type: object
      properties:
        guid:
          type: string
          format: uuid
          description: The GUID of the resource
        created_at:
          type: string
          format: date-time
          description: |
            The time the resource was created. 
            Timestamps generally appear in created_at and updated_at fields on resources. 
            Precision beyond seconds is not supported, even if the underlying database supports it (e.g. Postgres). 
            As a result, filtering on sub-second timestamps is not allowed.
            All v3 timestamps have the following format YYYY-MM-DDThh:mm:ssZ.
            Example timestamp (June 30, 2020 at 11:49:04 PM UTC): 2020-06-30T23:49:04Z
        updated_at:
          type: string
          format: date-time
          description: |
            The time the resource was last updated
            Timestamps generally appear in created_at and updated_at fields on resources. 
            Precision beyond seconds is not supported, even if the underlying database supports it (e.g. Postgres). 
            As a result, filtering on sub-second timestamps is not allowed.
            All v3 timestamps have the following format YYYY-MM-DDThh:mm:ssZ.
            Example timestamp (June 30, 2020 at 11:49:04 PM UTC): 2020-06-30T23:49:04Z
        links:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/link'
      description: |
        A resource represents an individual object within the system, such as an app or a service. It is represented as a JSON object.
        A resource consists of several required resource fields and other attributes specific to the resource.
        See Resources and Experimental Resources for specific resources.
    metadata:
      type: object
      properties:
        labels:
          type: object
          additionalProperties:
            type: string
          description: |
            A set of key-value pairs that describe the resource. Labels are a JSON object that contains information about a resource. They are used to tag resources with metadata that can be used to filter and group resources. Labels are included in the response body of a request to retrieve a resource.
            Labels are user-specified key/value pairs that are attached to API Resources. They are queryable, identifying attributes of a resource, but they do not affect the operation of CloudFoundry.

            For example, an app may be assigned a label with key sensitive and possible values true or false.

            Users could then find all sensitive apps with a selector for sensitive=true, resulting in a response containing only apps having the label key sensitive with a label value of true.

            Labels
            Labels allow users to apply identifying attributes to resources that are meaningful to the user, but not the CloudFoundry system.

            Examples may include (but are not limited to):

            "production" : "true" or "production" : "false"
            "env" : "dev" or "env" : "test" or "env" : "prod"
            "chargeback-code" : "abc123"
            Label keys
            Label keys are made up of an (optional) prefix, and name. If a prefix is present, it is separated from the name by a /. Prefixes are dns names intended to enable namespacing of label keys.

            A label key prefix must adhere to the following restrictions:

            Length: 0-253 characters
            Allowed characters: alphanumeric ( [a-z0-9A-Z] ), -, and .
            DNS subdomain format (series of subdomain labels separated by .)
            A label key name must adhere to the following restrictions:

            Length: 1-63 characters
            Allowed characters: alphanumeric ( [a-z0-9A-Z] ), -, _, and .
            Must begin and end with an alphanumeric character
            Label values
            Label values must adhere to the following restrictions:

            Length: 0-63 characters
            Allowed characters: alphanumeric ( [a-z0-9A-Z] ), -, _, and .
            Must begin and end with an alphanumeric character
            Empty values are allowed
        annotations:
          type: object
          additionalProperties:
            type: string
          description: |
            A set of key-value pairs that describe the resource. Annotations are a JSON object that contains information about a resource. They are used to tag resources with metadata that can be used to filter and group resources. Annotations are included in the response body of a request to retrieve a resource.
            Annotations are user-specified key-value pairs that are attached to API resources. They do not affect the operation of Cloud Foundry. Annotations cannot be used in filters.

            When a service instance is being created, the service broker is sent the annotations of the service instance, and the space and organization in which the service instance resides. When a service instance is being updated, the service broker is sent the annotations of the space and organization in which the service instance resides. When a service binding is being created, the service broker is sent annotations of any associated app, and the space and organization in which the binding resides. Only annotations with a prefix (e.g. company.com/contacts) are sent to service brokers.

            Examples may include (but are not limited to):

            "contact info": "bob@example.com jane@example.com"
            "library versions": "Spring: 5.1, Redis Client: a184098. yaml parser: 38"
            "git-sha": "d56fe0367554ae5e878e37ed6c5b9a82f5995512"
            Annotation keys
            Annotation keys are made up of an (optional) prefix and name. If a prefix is present, it is separated from the name by a /. Prefixes are DNS names intended to enable namespacing of annotation keys.

            An annotation key prefix must adhere to the following restrictions:

            Length: 0-253 characters
            Allowed characters: a-z, A-Z, 0-9, -, and .; emojis cannot be used in keys
            DNS subdomain format (series of subdomain annotations separated by .)
            An annotation key name must adhere to the following restrictions:

            Length: 1-63 characters
            Allowed characters: a-z, A-Z, 0-9, -, _, and .; emojis cannot be used in keys
            Must begin and end with an alphanumeric character
            Annotation values
            Annotation values must adhere to the following restrictions:

            Length: 0-5000 unicode characters
      description: |
        Metadata is a JSON object that contains information about a resource. It includes the GUID of the resource, the time the resource was created, the time the resource was last updated, and links to the resource.
        Metadata is included in the response body of a request to retrieve a resource.
    links:
      type: object
      description: Links provide URLs to relationships and actions for a resource. Links are represented as a JSON object and always contain a self link.
    buildpack:
      type: object
      allOf:
        - $ref: '#/components/schemas/baseSchema'
        - properties:
            name:
              type: string
              description: The name of the buildpack
            stack:
              type: string
              description: The stack the buildpack is compatible with
            position:
              type: integer
              description: The position of the buildpack in the order of execution
            enabled:
              type: boolean
              description: Whether the buildpack is enabled
            locked:
              type: boolean
              description: Whether the buildpack is locked
            filename:
              type: string
              description: The filename of the buildpack
            metadata:
              $ref: '#/components/schemas/metadata'
            links:
              allOf:
                - $ref: '#/components/schemas/links'
              properties:
                self:
                  allOf:
                    - $ref: '#/components/schemas/link'
                    - description: The URL of the buildpack
                upload:
                  allOf:
                    - $ref: '#/components/schemas/link'
                    - description: The URL to upload the buildpack
      description: A buildpack represents a set of scripts used to prepare an application for launch.
    buildpackList:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/pagination'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/buildpack'
    buildpackStateType:
      type: string
      description: Possible states of a buildpack
      enum:
        - AWAITING_UPLOAD
        - READY
    errors:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: integer
                description: A numeric code for this error
              detail:
                type: string
                description: Detailed description of the error
              title:
                type: string
                description: Name of the error
      description: |
        An error response will always return a list of error objects. Errors appear on the job resource for asynchronous operations.
        Clients should use the code and title fields for programmatically handling specific errors. The message in the detail field is subject to change over time.
    user:
      type: object
      properties:
        guid:
          type: string
          description: Unique identifier for the user
        created_at:
          type: string
          format: date-time
          description: The time with zone when the object was created
        updated_at:
          type: string
          format: date-time
          description: The time with zone when the object was last updated
        username:
          type: string
          description: The username of the user
        presentation_name:
          type: string
          description: The presentation name of the user
        origin:
          type: string
          description: The origin of the user
        metadata:
          $ref: '#/components/schemas/metadata'
        links:
          $ref: '#/components/schemas/links'
    paginated_users:
      allOf:
        - $ref: '#/components/schemas/baseSchema'
        - type: object
          properties:
            pagination:
              $ref: '#/components/schemas/pagination'
            resources:
              type: array
              items:
                $ref: '#/components/schemas/user'
    userCreate:
      type: object
      properties:
        guid:
          type: string
          description: Unique identifier for the user
        created_at:
          type: string
          format: date-time
          description: The time with zone when the object was created
        updated_at:
          type: string
          format: date-time
          description: The time with zone when the object was last updated
        username:
          type: string
          description: The username of the user
        presentation_name:
          type: string
          description: The presentation name of the user
        origin:
          type: string
          description: The origin of the user
        metadata:
          $ref: '#/components/schemas/metadata'
        links:
          $ref: '#/components/schemas/links'
      required:
        - guid
    userUpdate:
      type: object
      properties:
        username:
          type: string
          description: The username of the user
        presentation_name:
          type: string
          description: The presentation name of the user
        origin:
          type: string
          description: The origin of the user
        metadata:
          $ref: '#/components/schemas/metadata'
        links:
          $ref: '#/components/schemas/links'
    lifecycle:
      type: object
      properties:
        type:
          type: string
          description: Type of the lifecycle; valid values are buildpack, cnb, docker
        data:
          type: object
          additionalProperties: true
          description: Data specific to the lifecycle
          properties:
            buildpacks:
              type: array
              items:
                type: string
              description: List of the names of buildpacks, URLs from which they may be downloaded, or null to auto-detect a suitable buildpack during staging (applicable for buildpack and cnb lifecycles)
            stack:
              type: string
              description: The root filesystem to use with the buildpack, for example cflinuxfs4 (applicable for buildpack lifecycle)
            credentials:
              type: object
              additionalProperties:
                type: object
                properties:
                  username:
                    type: string
                  password:
                    type: string
                  token:
                    type: string
              description: Credentials used to download the configured buildpacks (applicable for cnb lifecycle)
      description: |
        The lifecycle type defines how the application droplet is created and run. The following lifecycle types are supported: - buildpack: Traditional buildpacks for Cloud Foundry applications. - cnb: Cloud Native Buildpacks that are OCI-compliant. - docker: Run pre-built Docker images.
    droplet:
      type: object
      allOf:
        - $ref: '#/components/schemas/baseSchema'
        - properties:
            state:
              type: string
              description: State of the droplet; valid states are AWAITING_UPLOAD, PROCESSING_UPLOAD, STAGED, COPYING, FAILED, or EXPIRED
            error:
              type: string
              description: A string describing the last error during the droplet lifecycle
            lifecycle:
              $ref: '#/components/schemas/lifecycle'
            execution_metadata:
              type: string
              description: Serialized JSON data resulting from staging for use when executing a droplet
            process_types:
              type: object
              description: The process types (keys) and associated start commands (values) that will be created when the droplet is executed
            metadata:
              $ref: '#/components/schemas/metadata'
            links:
              allOf:
                - $ref: '#/components/schemas/links'
                - properties:
                    assign_current_droplet:
                      allOf:
                        - $ref: '#/components/schemas/link'
                        - description: The URL to assign the droplet to an application
                    download:
                      allOf:
                        - $ref: '#/components/schemas/link'
                        - description: The URL to download the droplet
            checksum:
              type: object
              properties:
                type:
                  type: string
                  description: Hashing algorithm for checksum; supported algorithms are sha256 and sha1
                value:
                  type: string
                  description: Checksum of the droplet
            buildpacks:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    description: System buildpack name
                  detect_output:
                    type: string
                    description: Output during buildpack detect process
                  version:
                    type: string
                    description: Version reported by the buildpack
                  buildpack_name:
                    type: string
                    description: Name reported by the buildpack
            stack:
              type: string
              description: The root filesystem to use with the buildpack, for example cflinuxfs4
            image:
              type: string
              description: Docker image name for Docker droplets
      description: A droplet is the result of staging an application package. There are two types (lifecycles) of droplets buildpack and docker. In the case of the buildpacks, the droplet contains the bits produced by the buildpack, typically application code and dependencies.
    dropletList:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/pagination'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/droplet'
    relationships:
      type: object
      description: |
        Relationships represent associations between resources. When relationships are mutable, they can be used to create, read, update, and delete these associations. An app’s relationship to its current droplet is mutable, but an app’s relationship to its space is not.

        Relationships do not affect the fundamental properties of a resource, but may affect their behavior and permissions logic. Relationships are tied to the lifecycles of the associated resources and will be removed if either of the associated resources are deleted. For example, if a user is removed from an organization, both the user and the organization persist, but the relationship between them does not.

        Not all resources implement every relationship operation demonstrated in the examples below. See the docs for each resource to see how it interacts with its relationships.

        Endpoints that return relationship data list this information under the relationships key.

        The relationship object
        The relationship object is a key-value pair that uniquely identifies a resource. In practice this is almost always the guid of a resource.
    domain:
      type: object
      allOf:
        - $ref: '#/components/schemas/baseSchema'
        - properties:
            name:
              type: string
              description: The name of the domain; must be between 3-253 characters and follow RFC 1035
            internal:
              type: boolean
              description: Whether the domain is used for internal (container-to-container) traffic
            router_group:
              type: object
              properties:
                guid:
                  type: string
                  format: uuid
                  description: The GUID of the router group to route TCP traffic through
              description: The router group that the domain will use for TCP traffic
            supported_protocols:
              type: array
              items:
                type: string
              description: Available protocols for routes using the domain, currently http and tcp
            relationships:
              $ref: '#/components/schemas/relationships'
            metadata:
              $ref: '#/components/schemas/metadata'
            links:
              $ref: '#/components/schemas/links'
      description: |
        A domain is a fully qualified domain name that is used for application routes. A domain can be scoped to an organization, meaning it can be used to create routes for spaces inside that organization, or be left unscoped to allow all organizations access.
    domainList:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/pagination'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/domain'
    relationship:
      type: object
      properties:
        guid:
          type: string
          format: uuid
          description: The GUID of the resource
    relationshipToOne:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/relationship'
      description: |
        Some relationships relate a resource to exactly one other resource. For example an app can belong to only one space.
    relationshipToMany:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/relationship'
      description: |
        Some relationships relate a resource to several other resources. For example, an isolation segment can be entitled to multiple organizations.
    environmentVariableGroup:
      type: object
      properties:
        updated_at:
          type: string
          format: date-time
          description: The time the environment variable group was last updated
        name:
          type: string
          description: The name of the group; can only be "running" or "staging"
        var:
          type: object
          additionalProperties:
            type: string
          description: Environment variables to inject; keys and values must be strings
        links:
          $ref: '#/components/schemas/links'
      description: |
        Environment variable groups allow platform operators/admins to manage environment variables across all apps in a Cloud Foundry foundation. Variables in the running environment variable group will be injected into all running app containers. Variables in the staging environment variable group will be injected into the staging container for all apps while they are being staged.
    deployment:
      type: object
      allOf:
        - $ref: '#/components/schemas/baseSchema'
        - properties:
            status:
              type: object
              properties:
                value:
                  type: string
                  description: The current status of the deployment; valid values are ACTIVE (in progress) and FINALIZED (finished, either successfully or not)
                reason:
                  type: string
                  description: The reason for the status of the deployment
                details:
                  type: object
                  properties:
                    last_successful_healthcheck:
                      type: string
                      format: date-time
                      description: Timestamp of the last successful health check
                    last_status_change:
                      type: string
                      format: date-time
                      description: Timestamp of last change to status.value or status.reason
            strategy:
              type: string
              description: Strategy used for the deployment; supported strategies are rolling and canary (experimental)
            options:
              type: object
              properties:
                max_in_flight:
                  type: integer
                  description: The maximum number of new instances to deploy simultaneously
            droplet:
              $ref: '#/components/schemas/relationshipToOne'
            previous_droplet:
              $ref: '#/components/schemas/relationshipToOne'
            new_processes:
              type: array
              items:
                type: object
                properties:
                  guid:
                    type: string
                    format: uuid
                    description: The GUID of the new process created as part of the deployment
                  type:
                    type: string
                    description: The type of the new process created as part of the deployment
            revision:
              type: object
              properties:
                guid:
                  type: string
                  format: uuid
                  description: The revision the deployment is transitioning the app to
                version:
                  type: integer
                  description: The version of the revision
            relationships:
              $ref: '#/components/schemas/relationships'
            metadata:
              $ref: '#/components/schemas/metadata'
            links:
              $ref: '#/components/schemas/links'
      description: |
        Deployments are objects that manage updates to applications with zero downtime. They can either: - Manage updating an app’s droplet directly after an application package is staged - Roll an app back to a specific revision along with its associated droplet
        Deployment strategies supported: - Rolling deployments allow for applications to be deployed without incurring downtime by gradually rolling out instances. Max-in-flight can be configured to specify how many instances are rolled out simultaneously. - Canary deployments deploy a single instance and pause for user evaluation. If the canary instance is deemed successful, the deployment can be resumed via the continue action. The deployment then continues like a rolling deployment. This feature is experimental and is subject to change.
    deploymentList:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/pagination'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/deployment'
    featureFlag:
      type: object
      properties:
        name:
          type: string
          description: The name of the feature flag
        enabled:
          type: boolean
          description: Whether the feature flag is enabled
        updated_at:
          type: string
          format: date-time
          description: The time the feature flag was last updated; this will be blank for feature flags that have not been configured
        custom_error_message:
          type: string
          description: The error string returned by the API when a client performs an action disabled by the feature flag
        links:
          $ref: '#/components/schemas/links'
      description: |
        Feature flags are runtime flags that enable or disable functionality on the API.
    featureFlagList:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/pagination'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/featureFlag'
    build:
      type: object
      allOf:
        - $ref: '#/components/schemas/baseSchema'
        - properties:
            state:
              type: string
              description: State of the build; valid states are STAGING, STAGED, or FAILED
            staging_memory_in_mb:
              type: integer
              description: Memory in MB allocated for staging of the build
            staging_disk_in_mb:
              type: integer
              description: Disk space in MB allocated for staging of the build
            staging_log_rate_limit_bytes_per_second:
              type: integer
              description: Log rate limit in bytes per second allocated for staging of the build
            error:
              type: string
              description: A string describing errors during the build process
            lifecycle:
              $ref: '#/components/schemas/lifecycle'
            checksum:
              type: object
              properties:
                type:
                  type: string
                  description: Hashing algorithm for checksum; supported algorithms are sha256 and sha1
                value:
                  type: string
                  description: Checksum of build
            metadata:
              $ref: '#/components/schemas/metadata'
            relationships:
              $ref: '#/components/schemas/relationships'
            droplet:
              $ref: '#/components/schemas/relationshipToOne'
            created_by:
              type: object
              properties:
                guid:
                  type: string
                  description: The GUID of the user that created the build
                name:
                  type: string
                  description: The name of the user that created the build
                email:
                  type: string
                  description: The email of the user that created the build
            links:
              $ref: '#/components/schemas/links'
      description: |
        Builds represent the process of transforming source code into a runnable artifact. Builds can be triggered manually or automatically as part of the app lifecycle. A successful build results in a droplet that can be used to run the app.
    buildList:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/pagination'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/build'
    auditEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/baseSchema'
        - properties:
            type:
              type: string
              description: The type of the event
            actor:
              type: object
              properties:
                guid:
                  type: string
                  description: The unique identifier for the actor (user or system resource that performed the action)
                type:
                  type: string
                  description: The actor type
                name:
                  type: string
                  description: The name of the actor
            target:
              type: object
              properties:
                guid:
                  type: string
                  description: The unique identifier for the target (resource that the event acted upon)
                type:
                  type: string
                  description: The target type
                name:
                  type: string
                  description: The name of the target
            data:
              type: object
              description: Additional information about the event
            space:
              type: object
              properties:
                guid:
                  type: string
                  description: The unique identifier for the space where the event occurred
            organization:
              type: object
              properties:
                guid:
                  type: string
                  description: The unique identifier for the organization where the event occurred
            links:
              $ref: '#/components/schemas/links'
      description: |
        Audit events help Cloud Foundry operators monitor actions taken against resources (such as apps) via user or system actions.
    auditEventList:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/pagination'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/auditEvent'
    appFeature:
      type: object
      properties:
        name:
          type: string
          description: The name of the app feature
        description:
          type: string
          description: The description of the app feature
        enabled:
          type: boolean
          description: Whether the app feature is enabled
      description: |
        App features are used to manage whether optional capabilities are enabled for a given application.
    appFeatureList:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/pagination'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/appFeature'
    app:
      type: object
      allOf:
        - $ref: '#/components/schemas/baseSchema'
        - properties:
            name:
              type: string
              description: The name of the app
            state:
              type: string
              description: Current desired state of the app; valid values are STOPPED or STARTED
            lifecycle:
              $ref: '#/components/schemas/lifecycle'
            relationships:
              $ref: '#/components/schemas/relationships'
            metadata:
              $ref: '#/components/schemas/metadata'
      description: |
        Apps represent the core entities in the Cloud Foundry environment. They are the deployable units that run your code. Each app can have multiple processes, routes, and services associated with it. Apps can be scaled horizontally by increasing the number of instances. They can also be updated and restarted as needed.
    appList:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/pagination'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/app'
    route:
      type: object
      allOf:
        - $ref: '#/components/schemas/baseSchema'
        - properties:
            protocol:
              type: string
              description: Protocol used by the route; valid values are http1, http2, and tcp
            host:
              type: string
              description: The hostname for the route; can be null for TCP routes
            path:
              type: string
              description: The path for the route; must start with a slash / and be less than 128 characters
            port:
              type: integer
              description: The port for the route; can be null if not specified
            url:
              type: string
              description: Fully qualified path or address where the route directs traffic
            relationships:
              $ref: '#/components/schemas/relationships'
            metadata:
              $ref: '#/components/schemas/metadata'
            links:
              $ref: '#/components/schemas/links'
        - description: A route in Cloud Foundry is used to direct traffic from a URL to an application.
    routeDestinationsProtocol:
      type: string
      description: Valid protocols for route destinations
      enum:
        - http1
        - http2
    routeDestination:
      type: object
      properties:
        guid:
          type: string
          format: uuid
          description: Unique identifier for the destination
        app:
          type: object
          properties:
            guid:
              type: string
              format: uuid
              description: GUID of the app
            process:
              type: object
              properties:
                type:
                  type: string
                  description: Process type
                guid:
                  type: string
                  format: uuid
                  description: GUID of the process
          description: App to which the route destination directs traffic
        weight:
          type: integer
          description: Weight of the destination. Routes will equally distribute the traffic to all destinations with the same weight.
        port:
          type: integer
          description: Port of the destination that receives traffic.
        protocol:
          $ref: '#/components/schemas/routeDestinationsProtocol'
        created_at:
          type: string
          format: date-time
          description: The time with zone when the object was created
        updated_at:
          type: string
          format: date-time
          description: The time with zone when the object was last updated
        metadata:
          $ref: '#/components/schemas/metadata'
        links:
          $ref: '#/components/schemas/links'
      description: A route destination is a specification for where traffic on a route should be directed.
    routeDestinationList:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/pagination'
        destinations:
          type: array
          items:
            $ref: '#/components/schemas/routeDestination'
      description: A list of route destinations
    roleCreateType:
      type: string
      description: |-
        Role type. Possible values are:
        - `organization_user`: A user in the organization
        - `organization_auditor`: An auditor in the organization
        - `organization_manager`: A manager in the organization
        - `organization_billing_manager`: A billing manager in the organization
        - `space_auditor`: An auditor in the space
        - `space_developer`: A developer in the space
        - `space_manager`: A manager in the space
        - `space_supporter`: A supporter in the space (not authorized to use the V2 API)
      enum:
        - organization_user
        - organization_auditor
        - organization_manager
        - organization_billing_manager
        - space_auditor
        - space_developer
        - space_manager
        - space_supporter
    role:
      allOf:
        - $ref: '#/components/schemas/baseSchema'
      type: object
      properties:
        type:
          $ref: '#/components/schemas/roleCreateType'
        relationships:
          allOf:
            - $ref: '#/components/schemas/relationships'
          properties:
            organization:
              allOf:
                - $ref: '#/components/schemas/relationshipToOne'
                - description: |
                    A relationship to the organization the role controls access to; when this is a space role, `organization.data` will be `null`.
            space:
              allOf:
                - $ref: '#/components/schemas/relationshipToOne'
                - description: |
                    A relationship to the space the role controls access to; when this is an organization role, `space.data` will be `null`.
            user:
              allOf:
                - $ref: '#/components/schemas/relationshipToOne'
                - description: |
                    A relationship to the user; this is the user that has the role
      description: |
        Roles represent a set of permissions that can be granted to users. Roles are represented as a JSON object.
        A role consists of several required role fields and other attributes specific to the role.
        See Roles for specific roles.
    revision:
      type: object
      allOf:
        - $ref: '#/components/schemas/baseSchema'
        - properties:
            version:
              type: integer
              description: Version number of the revision
            description:
              type: string
              description: Description of the revision, created by the user
            droplet:
              $ref: '#/components/schemas/relationshipToOne'
            relationships:
              allOf:
                - $ref: '#/components/schemas/relationships'
                - properties:
                    app:
                      $ref: '#/components/schemas/relationshipToOne'
            enabled:
              type: boolean
              description: Whether the revision is enabled or not.
            metadata:
              $ref: '#/components/schemas/metadata'
            links:
              allOf:
                - $ref: '#/components/schemas/links'
                - properties:
                    environment_variables:
                      allOf:
                        - $ref: '#/components/schemas/link'
                        - description: Link to the revision's environment variables
      description: An App Revision is an immutable snapshot of an app at a particular point in time. Revisions are identified by a sequential version number. The "current" revision for an app is the revision that is currently deployed for all instances of the app.
    revisionList:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/pagination'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/revision'
    package:
      type: object
      allOf:
        - $ref: '#/components/schemas/baseSchema'
        - properties:
            type:
              type: string
              description: Type of the package; valid values are bits or docker
              enum:
                - bits
                - docker
            data:
              type: object
              description: Data for package type
              properties:
                error:
                  type: string
                  description: If an error occurs this field will contain the error message
                checksum:
                  type: object
                  properties:
                    type:
                      type: string
                      description: The checksum type, for example sha256
                    value:
                      type: string
                      description: The checksum value; this will be populated after bits are uploaded
                image:
                  type: string
                  description: The registry address of the image
                username:
                  type: string
                  description: The username for the image's registry
                password:
                  type: string
                  description: The password for the image's registry
            state:
              type: string
              description: State of the package; valid states are AWAITING_UPLOAD, PROCESSING_UPLOAD, READY, FAILED, COPYING, or EXPIRED
              enum:
                - AWAITING_UPLOAD
                - PROCESSING_UPLOAD
                - READY
                - FAILED
                - COPYING
                - EXPIRED
            relationships:
              $ref: '#/components/schemas/relationships'
            metadata:
              $ref: '#/components/schemas/metadata'
            links:
              allOf:
                - $ref: '#/components/schemas/links'
                - properties:
                    upload:
                      allOf:
                        - $ref: '#/components/schemas/link'
                        - description: The URL to upload the package bits
                    download:
                      allOf:
                        - $ref: '#/components/schemas/link'
                        - description: The URL to download the package bits
                    stage:
                      allOf:
                        - $ref: '#/components/schemas/link'
                        - description: The URL to stage the package
      description: A package represents an application"s "source code" - either raw bits or a pointer to these bits. Packages are used to create builds, which result in a droplet that can be deployed.
    packageList:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/pagination'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/package'
    packageCreateRequestBodyType:
      type: string
      description: Valid package types
      enum:
        - bits
        - docker
    error:
      type: object
      properties:
        code:
          type: integer
          description: A numeric code for this error
        detail:
          type: string
          description: Detailed description of the error
        title:
          type: string
          description: Name of the error
    warning:
      type: object
      properties:
        detail:
          type: string
          description: Description of the warning
    job:
      type: object
      allOf:
        - $ref: '#/components/schemas/baseSchema'
        - properties:
            operation:
              type: string
              description: The type of operation the job is performing
            state:
              type: string
              description: The current state of the job
              enum:
                - PROCESSING
                - COMPLETE
                - FAILED
                - POLLING
            errors:
              type: array
              description: Any errors encountered during job execution
              items:
                $ref: '#/components/schemas/error'
            warnings:
              type: array
              description: Any warnings encountered during job execution
              items:
                $ref: '#/components/schemas/warning'
            links:
              allOf:
                - $ref: '#/components/schemas/links'
      description: Jobs are created by the platform when performing certain asynchronous actions. Asynchronous jobs are commonly used for long-running tasks such as uploading large files, staging applications, or deleting resources.
    jobList:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/pagination'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/job'
    platformInfo:
      type: object
      properties:
        name:
          type: string
          description: Name of the platform
        build:
          type: string
          description: Build number of the platform
        version:
          type: integer
          description: Version number of the platform
        description:
          type: string
          description: Description of the platform
        cli_version:
          type: object
          description: Minimum and recommended CLI versions
          properties:
            minimum:
              type: string
              description: Minimum CLI version
            recommended:
              type: string
              description: Recommended CLI version
        custom:
          type: object
          description: Custom information about the platform
          additionalProperties:
            type: string
        links:
          type: object
          description: Links to related resources
          properties:
            self:
              allOf:
                - $ref: '#/components/schemas/link'
                - description: Link to the current endpoint
            support:
              allOf:
                - $ref: '#/components/schemas/link'
                - description: Link to the support website for the platform
    appUsageEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/baseSchema'
      properties:
        state:
          type: object
          properties:
            current:
              type: string
              default: ''
            previous:
              type: string
              default: ''
        app:
          type: object
          properties:
            guid:
              type: string
              default: ''
            name:
              type: string
              default: ''
        process:
          type: object
          properties:
            guid:
              type: string
              default: ''
            type:
              type: string
              default: ''
        space:
          type: object
          properties:
            guid:
              type: string
              default: ''
            name:
              type: string
              default: ''
        organization:
          type: object
          properties:
            guid:
              type: string
              default: ''
        buildpack:
          type: object
          properties:
            guid:
              type: string
              default: ''
            name:
              type: string
              default: ''
        task:
          type: object
          properties:
            guid:
              type: string
              default: ''
            name:
              type: string
              default: ''
        memory_in_mb_per_instance:
          type: object
          properties:
            current:
              type: integer
              default: 0
            previous:
              type: integer
              default: 0
        instance_count:
          type: object
          properties:
            current:
              type: integer
              default: 0
            previous:
              type: integer
              default: 0
      description: |-
        App usage events are a record of changes in the usage of apps and tasks. Examples include starting an application, scaling an application (from, say, one to three instances), and stopping an application.
        Usage events are typically used by billing and chargeback applications.
    appUsageEventList:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/pagination'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/appUsageEvent'
    isolationSegment:
      allOf:
        - $ref: '#/components/schemas/baseSchema'
        - properties:
            name:
              type: string
              description: The name of the isolation segment
            metadata:
              $ref: '#/components/schemas/metadata'
            links:
              allOf:
                - $ref: '#/components/schemas/links'
                - properties:
                    organizations:
                      allOf:
                        - $ref: '#/components/schemas/link'
                        - description: The organizations assigned to this isolation segment
      description: An isolation segment provides a dedicated pool of compute resources for an organization or space.
    isolationSegmentList:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/pagination'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/isolationSegment'
  responses:
    401Unauthorized:
      description: Unauthorized
    403Forbidden:
      description: Forbidden
    500Unauthorized:
      description: Internal Server Error
    buildpackCreateResponse:
      description: Successfully created buildpack
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/buildpack'
          examples:
            buildpack:
              summary: A sample buildpack
              value:
                guid: d5ccf6b2-3b8e-4b8e-8b8e-8b8e8b8e8b8e
                created_at: '2023-10-01T12:00:00Z'
                updated_at: '2023-10-01T12:00:00Z'
                name: ruby_buildpack
                stack: cflinuxfs3
                position: 1
                enabled: true
                locked: false
                state: AWAITING_UPLOAD
                filename: ruby_buildpack-cflinuxfs3-v1.0.0.zip
                links:
                  self:
                    href: http://127.0.0.1:4010/v3/buildpacks/d5ccf6b2-3b8e-4b8e-8b8e-8b8e8b8e8b8e
                  upload:
                    href: http://127.0.0.1:4010/v3/buildpacks/d5ccf6b2-3b8e-4b8e-8b8e-8b8e8b8e8b8e/upload
                    method: POST
                metadata:
                  labels:
                    some: label
                  annotations:
                    some: annotation
    buildpackGetResponse:
      description: Successfully retrieved buildpack
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/buildpack'
          examples:
            buildpack:
              summary: A sample buildpack
              value:
                guid: d5ccf6b2-3b8e-4b8e-8b8e-8b8e8b8e8b8e
                created_at: '2023-10-01T12:00:00Z'
                updated_at: '2023-10-01T12:00:00Z'
                name: ruby_buildpack
                stack: cflinuxfs3
                position: 1
                enabled: true
                locked: false
                state: AWAITING_UPLOAD
                filename: ruby_buildpack-cflinuxfs3-v1.0.0.zip
                links:
                  self:
                    href: http://127.0.0.1:4010/v3/buildpacks/d5ccf6b2-3b8e-4b8e-8b8e-8b8e8b8e8b8e
                  upload:
                    href: http://127.0.0.1:4010/v3/buildpacks/d5ccf6b2-3b8e-4b8e-8b8e-8b8e8b8e8b8e/upload
                    method: POST
                metadata:
                  labels:
                    some: label
                  annotations:
                    some: annotation
    userCreateResponse:
      description: User created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/user'
    userUpdateResponse:
      description: User updated
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/user'
    dropletListResponse:
      description: Successfully retrieved list of droplets
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/dropletList'
    dropletCreateResponse:
      description: Successfully created droplet
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/droplet'
    dropletGetResponse:
      description: Successfully retrieved droplet
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/droplet'
    routeListResponse:
      description: Successfully retrieved list of routes
      content:
        application/json:
          schema:
            type: object
            properties:
              pagination:
                $ref: '#/components/schemas/pagination'
              resources:
                type: array
                items:
                  $ref: '#/components/schemas/route'
    routeCreateResponse:
      description: Successfully created route
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/route'
    RoleListResponse:
      description: Roles retrieved
      content:
        application/json:
          schema:
            type: object
            properties:
              pagination:
                $ref: '#/components/schemas/pagination'
              resources:
                type: array
                items:
                  $ref: '#/components/schemas/role'
    RoleCreateResponse:
      description: Role created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/role'
    RoleGetResponse:
      description: Role retrieved
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/role'
  requestBodies:
    buildpackCreateRequestBody:
      description: Buildpack object that needs to be added
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: The name of the buildpack
              stack:
                type: string
                description: The stack the buildpack is compatible with
              position:
                type: integer
                description: The position of the buildpack in the order of execution
              state:
                $ref: '#/components/schemas/buildpackStateType'
              enabled:
                type: boolean
                description: Whether the buildpack is enabled
              locked:
                type: boolean
                description: Whether the buildpack is locked
              filename:
                type: string
                description: The filename of the buildpack
            required:
              - name
            description: Request schema for creating a buildpack
          examples:
            buildpack:
              summary: A sample buildpack
              value:
                name: ruby_buildpack
                stack: cflinuxfs3
                position: 1
                enabled: true
                state: AWAITING_UPLOAD
                locked: false
                filename: ruby_buildpack-cflinuxfs3-v1.0.0.zip
    userCreate:
      description: User to create
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/userCreate'
    userUpdate:
      description: User to update
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/userUpdate'
    dropletCreateRequestBody:
      description: Droplet object that needs to be created
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              relationships:
                $ref: '#/components/schemas/relationships'
              process_types:
                type: object
                description: Process names and start commands for the droplet
            required:
              - relationships
            description: Request schema for creating a droplet
    routeCreateRequestBody:
      description: Route object that needs to be added
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              protocol:
                type: string
                description: Protocol used by the route; valid values are http1, http2, and tcp
                example: http1
              host:
                type: string
                description: Hostname of the route; can be null for TCP routes
                example: my-app
              path:
                type: string
                description: Path of the route; must start with a slash /.
                example: /my-path
              port:
                type: integer
                description: Port of the route; can be null if not specified
                example: 8080
              relationships:
                $ref: '#/components/schemas/relationships'
            required:
              - protocol
              - relationships
            description: Request schema for creating a route
    routeDestinations:
      description: Route destination to create
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              properties:
                app:
                  type: object
                  properties:
                    guid:
                      type: string
                      format: uuid
                      description: App GUID
                    process:
                      type: object
                      properties:
                        type:
                          type: string
                          description: Process type
                        guid:
                          type: string
                          format: uuid
                          description: Process GUID
                  description: App to which the route destination directs traffic. Must provide either app or service instance.
                service_instance:
                  type: object
                  properties:
                    guid:
                      type: string
                      format: uuid
                      description: Service Instance GUID
                  description: Service instance to which the route destination directs traffic. Must provide either app or service instance.
                weight:
                  type: integer
                  description: Weight of the destination. Routes will equally distribute the traffic to all destinations with the same weight.
                port:
                  type: integer
                  description: Port of the destination that receives traffic.
                protocol:
                  type: string
                  description: Protocol of the destination that receives traffic. Defaults to 'http1' when not specified for HTTP routes, and is ignored for TCP routes.
                  enum:
                    - http1
                    - http2
              required:
                - app
              description: Request schema for creating a route destination
            description: List of route destinations
    RoleCreate:
      description: Role to create
      content:
        application/json:
          schema:
            type: object
            properties:
              type:
                type: string
                description: Role type
                enum:
                  - organization_user
                  - organization_auditor
                  - organization_manager
                  - organization_billing_manager
                  - space_auditor
                  - space_developer
                  - space_manager
                  - space_supporter
              relationships:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/relationshipToOne'
                  organization:
                    $ref: '#/components/schemas/relationshipToOne'
                  space:
                    $ref: '#/components/schemas/relationshipToOne'
    revisionUpdateRequestBody:
      description: Revision object that needs to be updated
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              description:
                type: string
                description: Description of the revision
              enabled:
                type: boolean
                description: Whether the revision is enabled
              metadata:
                $ref: '#/components/schemas/metadata'
            description: Request schema for updating a revision
    packageCreateRequestBody:
      description: Package object that needs to be created
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              type:
                $ref: '#/components/schemas/packageCreateRequestBodyType'
              data:
                type: object
                description: Data for package type
                properties:
                  image:
                    type: string
                    description: The registry address of the image (for docker type)
                  username:
                    type: string
                    description: The username for the image's registry (for docker type)
                  password:
                    type: string
                    description: The password for the image's registry (for docker type)
              relationships:
                $ref: '#/components/schemas/relationships'
              metadata:
                $ref: '#/components/schemas/metadata'
            required:
              - type
              - relationships
            description: Request schema for creating a package
    packageUpdateRequestBody:
      description: Package object that needs to be updated
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/metadata'
            description: Request schema for updating a package
    packageUploadRequestBody:
      description: The package bits to be uploaded
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              bits:
                type: string
                format: binary
                description: A binary zip file containing the package bits
              resources:
                type: array
                items:
                  type: object
                  description: Fingerprints of the application bits that have previously been pushed to Cloud Foundry, formatted as resource match objects
            required:
              - bits
            description: Request schema for uploading a package
    isolationSegmentCreate:
      description: Isolation Segment to create
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: The name of the isolation segment
              metadata:
                $ref: '#/components/schemas/metadata'
            required:
              - name
