//go:build go1.22

// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"fmt"
	"net/http"
)

// Link Each link is keyed by its type and will include a href for the URL and an optional method for links that cannot be followed using GET.
type Link struct {
	// Href The URL of the link
	Href string `json:"href"`

	// Method An optional field containing the HTTP method to be used when following the URL
	Method *string `json:"method,omitempty"`
}

// N200Root defines model for 200Root.
type N200Root struct {
	Links *struct {
		Apps *struct {
			// Href The URL of the link
			Href string `json:"href"`

			// Method An optional field containing the HTTP method to be used when following the URL
			Method *string `json:"method,omitempty"`
		} `json:"apps,omitempty"`
		Buildpacks *struct {
			// Href The URL of the link
			Href string `json:"href"`

			// Method An optional field containing the HTTP method to be used when following the URL
			Method *string `json:"method,omitempty"`
		} `json:"buildpacks,omitempty"`
		Builds *struct {
			// Href The URL of the link
			Href string `json:"href"`

			// Method An optional field containing the HTTP method to be used when following the URL
			Method *string `json:"method,omitempty"`
		} `json:"builds,omitempty"`
		Deployments *struct {
			// Href The URL of the link
			Href string `json:"href"`

			// Method An optional field containing the HTTP method to be used when following the URL
			Method *string `json:"method,omitempty"`
		} `json:"deployments,omitempty"`
		Domains *struct {
			// Href The URL of the link
			Href string `json:"href"`

			// Method An optional field containing the HTTP method to be used when following the URL
			Method *string `json:"method,omitempty"`
		} `json:"domains,omitempty"`
		Droplets *struct {
			// Href The URL of the link
			Href string `json:"href"`

			// Method An optional field containing the HTTP method to be used when following the URL
			Method *string `json:"method,omitempty"`
		} `json:"droplets,omitempty"`
		EnvironmentVariableGroups *struct {
			// Href The URL of the link
			Href string `json:"href"`

			// Method An optional field containing the HTTP method to be used when following the URL
			Method *string `json:"method,omitempty"`
		} `json:"environment_variable_groups,omitempty"`
		FeatureFlags *struct {
			// Href The URL of the link
			Href string `json:"href"`

			// Method An optional field containing the HTTP method to be used when following the URL
			Method *string `json:"method,omitempty"`
		} `json:"feature_flags,omitempty"`
		Info *struct {
			// Href The URL of the link
			Href string `json:"href"`

			// Method An optional field containing the HTTP method to be used when following the URL
			Method *string `json:"method,omitempty"`
		} `json:"info,omitempty"`
		IsolationSegments *struct {
			// Href The URL of the link
			Href string `json:"href"`

			// Method An optional field containing the HTTP method to be used when following the URL
			Method *string `json:"method,omitempty"`
		} `json:"isolation_segments,omitempty"`
		Jobs *struct {
			// Href The URL of the link
			Href string `json:"href"`

			// Method An optional field containing the HTTP method to be used when following the URL
			Method *string `json:"method,omitempty"`
		} `json:"jobs,omitempty"`
		OrganizationQuotas *struct {
			// Href The URL of the link
			Href string `json:"href"`

			// Method An optional field containing the HTTP method to be used when following the URL
			Method *string `json:"method,omitempty"`
		} `json:"organization_quotas,omitempty"`
		Organizations *struct {
			// Href The URL of the link
			Href string `json:"href"`

			// Method An optional field containing the HTTP method to be used when following the URL
			Method *string `json:"method,omitempty"`
		} `json:"organizations,omitempty"`
		Packages *struct {
			// Href The URL of the link
			Href string `json:"href"`

			// Method An optional field containing the HTTP method to be used when following the URL
			Method *string `json:"method,omitempty"`
		} `json:"packages,omitempty"`
		Processes *struct {
			// Href The URL of the link
			Href string `json:"href"`

			// Method An optional field containing the HTTP method to be used when following the URL
			Method *string `json:"method,omitempty"`
		} `json:"processes,omitempty"`
		ResourceMatches *struct {
			// Href The URL of the link
			Href string `json:"href"`

			// Method An optional field containing the HTTP method to be used when following the URL
			Method *string `json:"method,omitempty"`
		} `json:"resource_matches,omitempty"`
		Roles *struct {
			// Href The URL of the link
			Href string `json:"href"`

			// Method An optional field containing the HTTP method to be used when following the URL
			Method *string `json:"method,omitempty"`
		} `json:"roles,omitempty"`
		Routes *struct {
			// Href The URL of the link
			Href string `json:"href"`

			// Method An optional field containing the HTTP method to be used when following the URL
			Method *string `json:"method,omitempty"`
		} `json:"routes,omitempty"`
		SecurityGroups *struct {
			// Href The URL of the link
			Href string `json:"href"`

			// Method An optional field containing the HTTP method to be used when following the URL
			Method *string `json:"method,omitempty"`
		} `json:"security_groups,omitempty"`
		Self *struct {
			// Href The URL of the link
			Href string `json:"href"`

			// Method An optional field containing the HTTP method to be used when following the URL
			Method *string `json:"method,omitempty"`
		} `json:"self,omitempty"`
		ServiceBrokers *struct {
			// Href The URL of the link
			Href string `json:"href"`

			// Method An optional field containing the HTTP method to be used when following the URL
			Method *string `json:"method,omitempty"`
		} `json:"service_brokers,omitempty"`
		ServiceCredentialBindings *struct {
			// Href The URL of the link
			Href string `json:"href"`

			// Method An optional field containing the HTTP method to be used when following the URL
			Method *string `json:"method,omitempty"`
		} `json:"service_credential_bindings,omitempty"`
		ServiceInstances *struct {
			// Href The URL of the link
			Href string `json:"href"`

			// Method An optional field containing the HTTP method to be used when following the URL
			Method *string `json:"method,omitempty"`
		} `json:"service_instances,omitempty"`
		ServiceOfferings *struct {
			// Href The URL of the link
			Href string `json:"href"`

			// Method An optional field containing the HTTP method to be used when following the URL
			Method *string `json:"method,omitempty"`
		} `json:"service_offerings,omitempty"`
		ServicePlanVisibilities *struct {
			// Href The URL of the link
			Href string `json:"href"`

			// Method An optional field containing the HTTP method to be used when following the URL
			Method *string `json:"method,omitempty"`
		} `json:"service_plan_visibilities,omitempty"`
		ServicePlans *struct {
			// Href The URL of the link
			Href string `json:"href"`

			// Method An optional field containing the HTTP method to be used when following the URL
			Method *string `json:"method,omitempty"`
		} `json:"service_plans,omitempty"`
		ServiceRouteBindings *struct {
			// Href The URL of the link
			Href string `json:"href"`

			// Method An optional field containing the HTTP method to be used when following the URL
			Method *string `json:"method,omitempty"`
		} `json:"service_route_bindings,omitempty"`
		ServiceUsageEvents *struct {
			// Href The URL of the link
			Href string `json:"href"`

			// Method An optional field containing the HTTP method to be used when following the URL
			Method *string `json:"method,omitempty"`
		} `json:"service_usage_events,omitempty"`
		Sidecars *struct {
			// Href The URL of the link
			Href string `json:"href"`

			// Method An optional field containing the HTTP method to be used when following the URL
			Method *string `json:"method,omitempty"`
		} `json:"sidecars,omitempty"`
		SpaceQuotas *struct {
			// Href The URL of the link
			Href string `json:"href"`

			// Method An optional field containing the HTTP method to be used when following the URL
			Method *string `json:"method,omitempty"`
		} `json:"space_quotas,omitempty"`
		Spaces *struct {
			// Href The URL of the link
			Href string `json:"href"`

			// Method An optional field containing the HTTP method to be used when following the URL
			Method *string `json:"method,omitempty"`
		} `json:"spaces,omitempty"`
		Stacks *struct {
			// Href The URL of the link
			Href string `json:"href"`

			// Method An optional field containing the HTTP method to be used when following the URL
			Method *string `json:"method,omitempty"`
		} `json:"stacks,omitempty"`
		Tasks *struct {
			// Href The URL of the link
			Href string `json:"href"`

			// Method An optional field containing the HTTP method to be used when following the URL
			Method *string `json:"method,omitempty"`
		} `json:"tasks,omitempty"`
		Users *struct {
			// Href The URL of the link
			Href string `json:"href"`

			// Method An optional field containing the HTTP method to be used when following the URL
			Method *string `json:"method,omitempty"`
		} `json:"users,omitempty"`
	} `json:"links,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get root
	// (GET /)
	GetRoot(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetRoot operation middleware
func (siw *ServerInterfaceWrapper) GetRoot(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRoot(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/", wrapper.GetRoot)

	return m
}
